{"version":3,"sources":["utils/calculateChance.worker.ts","data/enums.ts","components/Popup.tsx","data/combinations.ts","components/Select.tsx","utils/formatNumber.ts","components/ArtifactForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["addMethods","methods","module","exports","w","Worker","name","Types","Stats","PopupContent","styled","div","Popup","target","content","useState","visible","setVisible","referenceElement","setReferenceElement","popperElement","setPopperElement","arrowElement","setArrowElement","usePopper","modifiers","options","element","padding","styles","attributes","outsideClickReferences","useMemo","current","useOnclickOutside","refs","ignoreClass","disabled","ref","onClick","vis","className","style","popper","arrow","allSubStats","CR","CD","ATK","ATKFlat","HP","HPFlat","DEF","DEFFlat","ER","EM","allMainStats","HB","Pyro","Electro","Cryo","Hydro","Anemo","Geo","Physical","allowedMainStats","Flower","Plume","Sands","Goblet","Circlet","allowedSubStats","reduce","acc","mainStat","_","without","Option","option","Select","onChange","value","items","rest","onChangeSelect","useCallback","event","map","item","label","getMeaningfulPercents","isNil","n","Math","pow","toFixed","workerInstance","WorkerCalculateChance","typeOptions","values","type","TooltipContainer","QuestionIconContainer","ResultsBox","memo","chances","chartData","margin","maxW","width","borderWidth","borderRadius","paddingLeft","isNumber","chanceSubsMatch","alignItems","flexFlow","paddingRight","fontSize","fontWeight","upgradeChance","chance","marginRight","color","isExternal","href","marginTop","isEmpty","ResponsiveContainer","aspect","AreaChart","data","top","right","bottom","left","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","fillOpacity","fill","dataKey","stroke","CartesianGrid","strokeDasharray","XAxis","YAxis","domain","tickFormatter","Tooltip","isAnimationActive","payload","resin","ArtifactForm","acceptBothSets","subStats","formData","setFormData","setChances","calculating","setCalculating","setChartData","mainStatOptions","subStatOptions","filter","subStat","find","useEffect","form","onChangeSubStat","pair","onChangeSubStatNumber","stringValue","onCalculate","a","performance","mark","calculateChance","measure","getEntriesByType","forEach","perfMeasure","console","log","duration","clearMarks","clearMeasures","invertedChance","cumulativeChartData","resinSpent","cumulativeInvertedChance","step","i","push","spacing","display","cursor","htmlFor","size","mb","checked","isChecked","index","min","defaultValue","colorScheme","onRemoveSubStat","keys","length","icon","isLoading","MainContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51d5e5f2.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"calculateChance\",\"Worker\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"ae6f509da632f3896396.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","export enum Types {\r\n  Flower = \"Flower of Life\",\r\n  Plume = \"Plume of Death\",\r\n  Sands = \"Sands of Eon\",\r\n  Goblet = \"Goblet of Eonothem\",\r\n  Circlet = \"Circlet of Logos\",\r\n}\r\n\r\nexport enum Stats {\r\n  HPFlat = \"HP\",\r\n  HP = \"HP%\",\r\n  ATKFlat = \"ATK\",\r\n  ATK = \"ATK%\",\r\n  DEFFlat = \"DEF\", // not main\r\n  DEF = \"DEF%\",\r\n  CR = \"CRIT Rate%\",\r\n  CD = \"CRIT DMG%\",\r\n  ER = \"Energy Recharge%\",\r\n  EM = \"Elemental Mastery\",\r\n  // not sub\r\n  HB = \"Healing Bonus%\",\r\n  Pyro = \"Pyro DMG Bonus%\",\r\n  Electro = \"Electro DMG Bonus%\",\r\n  Cryo = \"Cryo DMG Bonus%\",\r\n  Hydro = \"Hydro DMG Bonus%\",\r\n  Anemo = \"Anemo DMG Bonus%\",\r\n  Geo = \"Geo DMG Bonus%\",\r\n  Physical = \"Physical DMG Bonus%\",\r\n}\r\n\r\nexport type SubStats =\r\n  | Stats.HPFlat\r\n  | Stats.HP\r\n  | Stats.ATKFlat\r\n  | Stats.ATK\r\n  | Stats.DEFFlat\r\n  | Stats.DEF\r\n  | Stats.CR\r\n  | Stats.CD\r\n  | Stats.ER\r\n  | Stats.EM;\r\n\r\nexport type MainStats =\r\n  | Stats.HPFlat\r\n  | Stats.HP\r\n  | Stats.ATKFlat\r\n  | Stats.ATK\r\n  | Stats.DEF\r\n  | Stats.CR\r\n  | Stats.CD\r\n  | Stats.ER\r\n  | Stats.EM\r\n  | Stats.HB\r\n  | Stats.Pyro\r\n  | Stats.Electro\r\n  | Stats.Cryo\r\n  | Stats.Hydro\r\n  | Stats.Anemo\r\n  | Stats.Geo\r\n  | Stats.Physical;\r\n","import React, { useState, useMemo } from \"react\";\r\nimport { usePopper } from \"react-popper\";\r\nimport useOnclickOutside from \"react-cool-onclickoutside\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface PopupProps {\r\n  target: JSX.Element;\r\n  content: JSX.Element;\r\n}\r\n\r\nconst PopupContent = styled.div`\r\n  background: #333b4d;\r\n  z-index: 2;\r\n  padding: 0.5em 1em;\r\n  border-radius: 0.5em;\r\n  border: 1px solid white;\r\n  max-width: 95%;\r\n  font-size: 90%;\r\n`;\r\n\r\nexport const Popup = ({ target, content }: PopupProps) => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(\r\n    null\r\n  );\r\n  const [popperElement, setPopperElement] = useState<HTMLElement | null>(null);\r\n  const [arrowElement, setArrowElement] = useState<HTMLElement | null>(null);\r\n  const { styles, attributes } = usePopper(referenceElement, popperElement, {\r\n    modifiers: [\r\n      { name: \"arrow\", options: { element: arrowElement } },\r\n      {\r\n        name: \"preventOverflow\",\r\n        options: {\r\n          padding: 5,\r\n        },\r\n      },\r\n    ],\r\n  });\r\n\r\n  const outsideClickReferences = useMemo(\r\n    () => [{ current: popperElement }, { current: referenceElement }],\r\n    [popperElement, referenceElement]\r\n  );\r\n  useOnclickOutside(\r\n    () => {\r\n      visible && setVisible(false);\r\n    },\r\n    {\r\n      refs: outsideClickReferences,\r\n      ignoreClass: \"popup-body\",\r\n      disabled: !visible,\r\n    }\r\n  );\r\n\r\n  const toggleVisibility = () => {\r\n    setVisible((vis) => !vis);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div ref={setReferenceElement} onClick={toggleVisibility}>\r\n        {target}\r\n      </div>\r\n      {visible && (\r\n        <PopupContent\r\n          className=\"popup-body\"\r\n          ref={setPopperElement}\r\n          style={styles.popper}\r\n          {...attributes.popper}\r\n        >\r\n          {content}\r\n          <div ref={setArrowElement} style={styles.arrow} />\r\n        </PopupContent>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import _ from \"lodash/fp\";\r\nimport { MainStats, Stats, SubStats, Types } from \"./enums\";\r\n\r\nconst allSubStats: SubStats[] = [\r\n  Stats.CR,\r\n  Stats.CD,\r\n  Stats.ATK,\r\n  Stats.ATKFlat,\r\n  Stats.HP,\r\n  Stats.HPFlat,\r\n  Stats.DEF,\r\n  Stats.DEFFlat,\r\n  Stats.ER,\r\n  Stats.EM,\r\n];\r\n\r\nconst allMainStats: MainStats[] = [\r\n  Stats.HPFlat,\r\n  Stats.ATKFlat,\r\n  Stats.HP,\r\n  Stats.ATK,\r\n  Stats.DEF,\r\n  Stats.ER,\r\n  Stats.EM,\r\n  Stats.CR,\r\n  Stats.CD,\r\n  Stats.HB,\r\n  Stats.Pyro,\r\n  Stats.Electro,\r\n  Stats.Cryo,\r\n  Stats.Hydro,\r\n  Stats.Anemo,\r\n  Stats.Geo,\r\n  Stats.Physical,\r\n];\r\n\r\nexport type MainStatsByType<Type extends Types> = Type extends Types.Flower\r\n  ? Stats.HPFlat\r\n  : Type extends Types.Plume\r\n  ? Stats.ATKFlat\r\n  : Type extends Types.Sands\r\n  ? Stats.HP | Stats.ATK | Stats.DEF | Stats.ER | Stats.EM\r\n  : Type extends Types.Goblet\r\n  ?\r\n      | Stats.HP\r\n      | Stats.ATK\r\n      | Stats.DEF\r\n      | Stats.Pyro\r\n      | Stats.Electro\r\n      | Stats.Cryo\r\n      | Stats.Hydro\r\n      | Stats.Anemo\r\n      | Stats.Geo\r\n      | Stats.Physical\r\n      | Stats.EM\r\n  : Type extends Types.Circlet\r\n  ? Stats.HP | Stats.ATK | Stats.DEF | Stats.CR | Stats.CD | Stats.HB | Stats.EM\r\n  : never;\r\n\r\nexport type SubStatsByMain<MainStat extends MainStats> = Exclude<\r\n  SubStats,\r\n  MainStat\r\n>;\r\n\r\nexport const allowedMainStats: { [T in Types]: MainStatsByType<T>[] } = {\r\n  [Types.Flower]: [Stats.HPFlat],\r\n  [Types.Plume]: [Stats.ATKFlat],\r\n  [Types.Sands]: [Stats.HP, Stats.ATK, Stats.DEF, Stats.ER, Stats.EM],\r\n  [Types.Goblet]: [\r\n    Stats.HP,\r\n    Stats.ATK,\r\n    Stats.DEF,\r\n    Stats.Pyro,\r\n    Stats.Electro,\r\n    Stats.Cryo,\r\n    Stats.Hydro,\r\n    Stats.Anemo,\r\n    Stats.Geo,\r\n    Stats.Physical,\r\n    Stats.EM,\r\n  ],\r\n  [Types.Circlet]: [\r\n    Stats.HP,\r\n    Stats.ATK,\r\n    Stats.DEF,\r\n    Stats.CR,\r\n    Stats.CD,\r\n    Stats.HB,\r\n    Stats.EM,\r\n  ],\r\n};\r\n\r\n// All substats are allowed except for the duplicate of main stat\r\ntype AllowedSubStats = Record<MainStats, SubStats[]>;\r\n\r\nexport const allowedSubStats: AllowedSubStats = allMainStats.reduce(\r\n  (acc, mainStat) => {\r\n    return {\r\n      ...acc,\r\n      [mainStat]: _.without([mainStat], allSubStats),\r\n    };\r\n  },\r\n  {} as AllowedSubStats\r\n);\r\n","import { useCallback } from \"react\";\r\nimport {\r\n  Select as ChakraSelect,\r\n  SelectProps as ChakraSelectProps,\r\n} from \"@chakra-ui/select\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Option = styled.option`\r\n  color: black;\r\n  background: lightgrey;\r\n`;\r\n\r\ntype SelectProps<T extends string> = {\r\n  onChange: (selected: T) => void;\r\n  items: { label: string; value: T }[];\r\n  value: T | undefined;\r\n} & Omit<ChakraSelectProps, \"onChange\" | \"value\">;\r\n\r\nexport function Select<T extends string>({\r\n  onChange,\r\n  value,\r\n  items,\r\n  ...rest\r\n}: SelectProps<T>) {\r\n  const onChangeSelect = useCallback(\r\n    (event) => {\r\n      const value = event.target.value as T;\r\n      onChange(value);\r\n    },\r\n    [onChange]\r\n  );\r\n\r\n  return (\r\n    <ChakraSelect onChange={onChangeSelect} value={value} {...rest}>\r\n      {items.map((item) => {\r\n        return (\r\n          <Option key={item.value} value={item.value}>\r\n            {item.label}\r\n          </Option>\r\n        );\r\n      })}\r\n    </ChakraSelect>\r\n  );\r\n}\r\n","import _ from \"lodash/fp\";\r\n\r\nexport const getMeaningfulPercents = (value: number): string => {\r\n  let formattedChance: string = \"0%\";\r\n  if (_.isNil(value)) {\r\n    return \"\";\r\n  }\r\n  if (value === 0) {\r\n    return formattedChance;\r\n  }\r\n  let n = 0,\r\n    num = 0;\r\n  while (n < 12) {\r\n    num = value * 100 * Math.pow(10, n);\r\n    if (num > 1) {\r\n      break;\r\n    }\r\n    n++;\r\n  }\r\n  return (value * 100).toFixed(n + 2) + \"%\";\r\n};\r\n","import {\r\n  Button,\r\n  IconButton,\r\n  Text,\r\n  Box,\r\n  FormControl,\r\n  FormLabel,\r\n  VStack,\r\n  NumberInput,\r\n  HStack,\r\n  NumberInputField,\r\n  CloseButton,\r\n  Flex,\r\n  Link,\r\n  Switch,\r\n} from \"@chakra-ui/react\";\r\nimport styled from \"styled-components\";\r\nimport { useState, useEffect, memo, ChangeEvent } from \"react\";\r\nimport { MdAddCircle } from \"react-icons/md\";\r\nimport { FaRegQuestionCircle } from \"react-icons/fa\";\r\nimport _ from \"lodash/fp\";\r\n\r\nimport { Popup } from \"./Popup\";\r\nimport { allowedMainStats, allowedSubStats } from \"../data/combinations\";\r\nimport { MainStats, SubStats, Types } from \"../data/enums\";\r\nimport WorkerCalculateChance from \"../utils/calculateChance.worker\";\r\nimport type { CalculateResult } from \"../utils/calculateChance.worker\";\r\n\r\nimport { Select } from \"./Select\";\r\nimport { getMeaningfulPercents } from \"../utils/formatNumber\";\r\nimport {\r\n  Area,\r\n  AreaChart,\r\n  CartesianGrid,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from \"recharts\";\r\n\r\ninterface FormData {\r\n  acceptBothSets: boolean;\r\n  type: Types;\r\n  mainStat?: MainStats;\r\n  subStats: [SubStats, number, string][];\r\n}\r\n\r\ninterface ChartDataEntry {\r\n  resin: number;\r\n  chance: number;\r\n}\r\n\r\nconst workerInstance = WorkerCalculateChance();\r\n\r\nconst typeOptions: { value: Types; label: string }[] = _.values(Types).map(\r\n  (type) => ({ label: type, value: type })\r\n);\r\n\r\nconst TooltipContainer = styled.div`\r\n  border-radius: 5px;\r\n  background: #313743;\r\n  padding: 5px 10px;\r\n  border: 1px solid white;\r\n`;\r\n\r\nconst QuestionIconContainer = styled.div`\r\n  cursor: pointer;\r\n  font-size: 120%;\r\n`;\r\n\r\nconst ResultsBox = memo(\r\n  ({\r\n    chances,\r\n    chartData,\r\n  }: {\r\n    chances: CalculateResult;\r\n    chartData: ChartDataEntry[];\r\n  }) => {\r\n    return (\r\n      <Box\r\n        margin={1}\r\n        maxW=\"95%\"\r\n        width=\"lg\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        padding={2}\r\n        paddingLeft={4}\r\n      >\r\n        {_.isNumber(chances.chanceSubsMatch) && (\r\n          <Flex alignItems=\"center\" flexFlow=\"row nowrap\">\r\n            <Text>Chance of getting an artifact with these stats:</Text>\r\n            <Text\r\n              paddingLeft={2}\r\n              paddingRight={2}\r\n              fontSize=\"120%\"\r\n              fontWeight=\"bold\"\r\n            >\r\n              {getMeaningfulPercents(chances.chanceSubsMatch)}\r\n            </Text>\r\n          </Flex>\r\n        )}\r\n        {_.isNumber(chances.upgradeChance) && (\r\n          <Flex alignItems=\"center\" flexFlow=\"row nowrap\">\r\n            <Text>Chance of upgrading to desired numbers:</Text>\r\n            <Text\r\n              paddingLeft={2}\r\n              paddingRight={2}\r\n              fontSize=\"120%\"\r\n              fontWeight=\"bold\"\r\n            >\r\n              {getMeaningfulPercents(chances.upgradeChance)}\r\n            </Text>\r\n          </Flex>\r\n        )}\r\n        <Flex alignItems=\"center\" flexFlow=\"row nowrap\">\r\n          <Text>Total chance in one run (20 resin):</Text>\r\n          <Text\r\n            paddingLeft={2}\r\n            paddingRight={2}\r\n            fontSize=\"120%\"\r\n            fontWeight=\"bold\"\r\n          >\r\n            {getMeaningfulPercents(chances.chance)}\r\n          </Text>\r\n          <Popup\r\n            target={\r\n              <QuestionIconContainer>\r\n                <FaRegQuestionCircle />\r\n              </QuestionIconContainer>\r\n            }\r\n            content={\r\n              <div>\r\n                <Text fontWeight=\"bold\" marginRight={6}>\r\n                  This calculation assumes the following:\r\n                </Text>\r\n                <Text>5* artifacts upgraded to +20;</Text>\r\n                <Text>\r\n                  1.07 artifacts per run on average;{\" \"}\r\n                  <Link\r\n                    color=\"teal\"\r\n                    isExternal\r\n                    href=\"https://docs.google.com/spreadsheets/d/1RcuniapqS6nOP05OCH0ui10Vo3bWu0AvFbhgcHzTybY/edit\"\r\n                  >\r\n                    Source\r\n                  </Link>\r\n                </Text>\r\n                <Text>50% chance to get one of the two sets;</Text>\r\n                <Text>20% chance to get the correct artifact type;</Text>\r\n                <Text>\r\n                  20% chance to get 4 initial sub-stats, and 80% to get 3.{\" \"}\r\n                  <Link\r\n                    color=\"teal\"\r\n                    isExternal\r\n                    href=\"https://genshin-impact.fandom.com/wiki/Loot_System/Artifact_Drop_Distribution#Initial_Sub_Stat_Number_Distribution\"\r\n                  >\r\n                    Source\r\n                  </Link>\r\n                </Text>\r\n                <Text>\r\n                  Calculated chance to get the correct main stat and sub-stats;{\" \"}\r\n                  <Link\r\n                    color=\"teal\"\r\n                    isExternal\r\n                    href=\"https://genshin-impact.fandom.com/wiki/Artifacts/Distribution\"\r\n                  >\r\n                    Source 1\r\n                  </Link>\r\n                  {\", \"}\r\n                  <Link\r\n                    color=\"teal\"\r\n                    isExternal\r\n                    href=\"https://docs.google.com/spreadsheets/d/1sYQrV5Yp_QTVEKMLWquMu0mDgHhOO_Rh2LfcWdS_Eno/edit\"\r\n                  >\r\n                    Source 2\r\n                  </Link>\r\n                </Text>\r\n                <Text marginTop={2}>\r\n                  Contact me at{\" \"}\r\n                  <Link\r\n                    color=\"teal\"\r\n                    isExternal\r\n                    href=\"https://www.reddit.com/message/compose/?to=grumd\"\r\n                  >\r\n                    /u/grumd\r\n                  </Link>{\" \"}\r\n                  if you have any questions.\r\n                </Text>\r\n              </div>\r\n            }\r\n          />\r\n        </Flex>\r\n        <Text>Cumulative chance to get this artifact at least once:</Text>\r\n        {chances.chance > 0 && !_.isEmpty(chartData) && (\r\n          <ResponsiveContainer width=\"100%\" aspect={2.5}>\r\n            <AreaChart\r\n              data={chartData}\r\n              margin={{ top: 5, right: 5, bottom: 5, left: -15 }}\r\n            >\r\n              <defs>\r\n                <linearGradient id=\"colorGrad\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                  <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\r\n                  <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\r\n                </linearGradient>\r\n              </defs>\r\n              <Area\r\n                fillOpacity={1}\r\n                fill=\"url(#colorGrad)\"\r\n                type=\"monotone\"\r\n                dataKey=\"chance\"\r\n                stroke=\"#8884d8\"\r\n              />\r\n              <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n              <XAxis dataKey=\"resin\" />\r\n              <YAxis\r\n                domain={[0, 1]}\r\n                tickFormatter={(value) => (value * 100).toFixed(0) + \"%\"}\r\n              />\r\n              <Tooltip\r\n                isAnimationActive={false}\r\n                content={({ payload }) => {\r\n                  const item = payload?.[0]?.payload;\r\n                  if (item) {\r\n                    return (\r\n                      <TooltipContainer>\r\n                        <div>Resin: {item.resin}</div>\r\n                        <div>Days: {item.resin / 160}</div>\r\n                        <div>Chance: {getMeaningfulPercents(item.chance)}</div>\r\n                      </TooltipContainer>\r\n                    );\r\n                  }\r\n                  return null;\r\n                }}\r\n              />\r\n            </AreaChart>\r\n          </ResponsiveContainer>\r\n        )}\r\n      </Box>\r\n    );\r\n  }\r\n);\r\n\r\nexport function ArtifactForm() {\r\n  const [formData, setFormData] = useState<FormData>({\r\n    acceptBothSets: false,\r\n    type: Types.Flower,\r\n    subStats: [],\r\n  });\r\n  const [chances, setChances] = useState<Partial<CalculateResult>>({});\r\n  const [calculating, setCalculating] = useState<boolean>(false);\r\n  const [chartData, setChartData] = useState<ChartDataEntry[]>([]);\r\n\r\n  const onChangeBothSets = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setFormData((form) => ({\r\n      ...form,\r\n      acceptBothSets: !!event.target.checked,\r\n    }));\r\n  };\r\n\r\n  const onChangeType = (value: Types) => {\r\n    setFormData((form) => ({\r\n      acceptBothSets: form.acceptBothSets,\r\n      type: value,\r\n      subStats: [],\r\n    })); // reset all\r\n  };\r\n\r\n  const onChangeMainStat = (value: MainStats) => {\r\n    setFormData((form) => ({ ...form, mainStat: value, subStats: [] })); // reset sub stats\r\n  };\r\n\r\n  const mainStatOptions = allowedMainStats[formData.type].map((mainStat) => ({\r\n    label: mainStat,\r\n    value: mainStat,\r\n  }));\r\n\r\n  const subStatList = formData.mainStat\r\n    ? allowedSubStats[formData.mainStat]\r\n    : [];\r\n  const subStatOptions = subStatList\r\n    .filter((subStat) => !formData.subStats.find(([s]) => s === subStat))\r\n    .map((subStat) => ({\r\n      label: subStat,\r\n      value: subStat,\r\n    }));\r\n\r\n  useEffect(() => {\r\n    if (!formData.mainStat) {\r\n      setFormData((form) => ({ ...form, mainStat: mainStatOptions[0].value }));\r\n    }\r\n  }, [formData.mainStat, mainStatOptions]);\r\n\r\n  const onAddSubStats = () => {\r\n    if (subStatOptions.length) {\r\n      setFormData((form) => ({\r\n        ...form,\r\n        subStats: [...form.subStats, [subStatOptions[0].value, 0, \"0\"]],\r\n      }));\r\n    }\r\n  };\r\n\r\n  const onChangeSubStat = (subStat: SubStats) => (value: SubStats) => {\r\n    setFormData((form) => ({\r\n      ...form,\r\n      subStats: form.subStats.map((pair) =>\r\n        pair[0] === subStat ? [value, 0, \"0\"] : pair\r\n      ),\r\n    }));\r\n  };\r\n\r\n  const onChangeSubStatNumber =\r\n    (subStat: SubStats) => (stringValue: string, value: number) => {\r\n      setFormData((form) => ({\r\n        ...form,\r\n        subStats: form.subStats.map((pair) =>\r\n          pair[0] === subStat ? [subStat, value || 0, stringValue || \"0\"] : pair\r\n        ),\r\n      }));\r\n    };\r\n\r\n  const onRemoveSubStat = (subStat: SubStats) => {\r\n    setFormData((form) => ({\r\n      ...form,\r\n      subStats: form.subStats.filter((pair) => pair[0] !== subStat),\r\n    }));\r\n  };\r\n\r\n  const onCalculate = async () => {\r\n    if (formData.mainStat) {\r\n      setCalculating(true);\r\n      performance.mark(\"chance\");\r\n      const { chance, upgradeChance, chanceSubsMatch } =\r\n        await workerInstance.calculateChance({\r\n          acceptBothSets: formData.acceptBothSets,\r\n          type: formData.type,\r\n          mainStat: formData.mainStat,\r\n          subStats: formData.subStats.reduce((acc, [subStat, value]) => {\r\n            return {\r\n              ...acc,\r\n              [subStat]: value,\r\n            };\r\n          }, {}),\r\n        });\r\n      performance.measure(\"Time to calculate chances\", \"chance\");\r\n      setCalculating(false);\r\n      performance.getEntriesByType(\"measure\").forEach((perfMeasure) => {\r\n        console.log(perfMeasure.name, perfMeasure.duration, \"ms\");\r\n      });\r\n      performance.clearMarks();\r\n      performance.clearMeasures();\r\n\r\n      const invertedChance = 1 - chance;\r\n      const cumulativeChartData: { resin: number; chance: number }[] = [];\r\n      let resinSpent = 0,\r\n        cumulativeInvertedChance = 1;\r\n      const step =\r\n        chance > 0.01 ? 1 : chance > 0.005 ? 4 : chance > 0.001 ? 8 : 16;\r\n      // 2920 is 365 days of 8 domain runs per day\r\n      for (let i = 0; i < 2920; i++) {\r\n        if (cumulativeInvertedChance < 0.05) {\r\n          break;\r\n        }\r\n        resinSpent += 20;\r\n        cumulativeInvertedChance *= invertedChance;\r\n        if (!((i + 1) % step)) {\r\n          cumulativeChartData.push({\r\n            resin: resinSpent,\r\n            chance: 1 - cumulativeInvertedChance,\r\n          });\r\n        }\r\n      }\r\n      setChartData(cumulativeChartData);\r\n      setChances({ chance, upgradeChance, chanceSubsMatch });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Flex flexFlow=\"column wrap\" width=\"100%\" alignItems=\"center\">\r\n      <Box\r\n        margin={1}\r\n        maxW=\"95%\"\r\n        width=\"lg\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        padding={2}\r\n      >\r\n        <VStack padding=\"2\" spacing=\"4\">\r\n          <FormControl display=\"flex\" alignItems=\"center\">\r\n            <FormLabel cursor=\"pointer\" htmlFor=\"one-set\" size=\"lg\" mb={1}>\r\n              Accept both artifact sets from a domain\r\n            </FormLabel>\r\n            <Switch\r\n              id=\"one-set\"\r\n              onChange={onChangeBothSets}\r\n              isChecked={formData.acceptBothSets}\r\n            />\r\n          </FormControl>\r\n          <FormControl id=\"type\">\r\n            <FormLabel>Artifact type:</FormLabel>\r\n            <Select\r\n              value={formData.type}\r\n              items={typeOptions}\r\n              onChange={onChangeType}\r\n            />\r\n          </FormControl>\r\n          <FormControl id=\"mainStat\">\r\n            <FormLabel>Main stat:</FormLabel>\r\n            <Select\r\n              value={formData.mainStat}\r\n              items={mainStatOptions}\r\n              onChange={onChangeMainStat}\r\n            />\r\n          </FormControl>\r\n          <FormControl id=\"subStat\">\r\n            <FormLabel>Sub stats (optional):</FormLabel>\r\n            <VStack alignItems=\"start\" width=\"100%\">\r\n              {formData.subStats.map((value, index) => {\r\n                const [subStat, , stringValue] = value;\r\n                return (\r\n                  <HStack key={`substat-${index}`} width=\"100%\">\r\n                    <FormControl id={`substat-${index}-name`}>\r\n                      <Select\r\n                        value={subStat}\r\n                        items={[\r\n                          { label: subStat, value: subStat },\r\n                          ...subStatOptions,\r\n                        ]}\r\n                        onChange={onChangeSubStat(subStat)}\r\n                      />\r\n                    </FormControl>\r\n                    <Text fontWeight=\"bold\" fontSize=\"large\">\r\n                      {\">=\"}\r\n                    </Text>\r\n                    <FormControl id={`substat-${index}-value`}>\r\n                      <NumberInput\r\n                        min={0}\r\n                        defaultValue={0}\r\n                        value={stringValue}\r\n                        onChange={onChangeSubStatNumber(subStat)}\r\n                      >\r\n                        <NumberInputField />\r\n                      </NumberInput>\r\n                    </FormControl>\r\n                    <CloseButton\r\n                      colorScheme=\"blue\"\r\n                      onClick={() => onRemoveSubStat(subStat)}\r\n                    />\r\n                  </HStack>\r\n                );\r\n              })}\r\n              <FormControl>\r\n                {_.keys(formData.subStats).length < 4 && (\r\n                  <IconButton\r\n                    color=\"white\"\r\n                    fontSize=\"2xl\"\r\n                    colorScheme=\"purple\"\r\n                    aria-label=\"Add substat\"\r\n                    onClick={onAddSubStats}\r\n                    icon={<MdAddCircle />}\r\n                  />\r\n                )}\r\n              </FormControl>\r\n            </VStack>\r\n          </FormControl>\r\n          <Button\r\n            disabled={!formData.mainStat}\r\n            colorScheme=\"pink\"\r\n            isLoading={calculating}\r\n            onClick={onCalculate}\r\n          >\r\n            Calculate\r\n          </Button>\r\n        </VStack>\r\n      </Box>\r\n      {!_.isNil(chances.chance) && (\r\n        <ResultsBox\r\n          chances={chances as CalculateResult}\r\n          chartData={chartData}\r\n        />\r\n      )}\r\n    </Flex>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\nimport { ArtifactForm } from \"./components/ArtifactForm\";\n\nconst MainContainer = styled.div`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: white;\n`;\n\nfunction App() {\n  return (\n    <MainContainer>\n      <ArtifactForm />\n    </MainContainer>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}