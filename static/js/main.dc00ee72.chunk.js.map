{"version":3,"sources":["data/enums.ts","data/combinations.ts","data/chances.ts","components/Select.tsx","utils/formatNumber.ts","components/ArtifactForm.tsx","utils/calculateChance.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Types","Stats","allSubStats","CR","CD","ATK","ATKFlat","HP","HPFlat","DEF","DEFFlat","ER","EM","allMainStats","HB","Pyro","Electro","Cryo","Hydro","Anemo","Geo","Physical","allowedMainStats","Flower","Plume","Sands","Goblet","Circlet","allowedSubStats","reduce","acc","mainStat","_","without","mainStatChances","dmgBonusChances","upgradeTiers","Option","styled","option","Select","onChange","value","items","rest","onChangeSelect","useCallback","event","target","map","item","label","getMeaningfulPercents","isNil","n","Math","pow","toFixed","typeOptions","values","type","TooltipContainer","div","QuestionIconContainer","ResultsBox","memo","chance","chartData","margin","maxW","width","borderWidth","borderRadius","padding","paddingLeft","alignItems","flexFlow","paddingRight","fontSize","fontWeight","color","marginRight","isExternal","href","marginTop","isEmpty","ResponsiveContainer","aspect","AreaChart","data","top","right","bottom","left","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","fillOpacity","fill","dataKey","stroke","CartesianGrid","strokeDasharray","XAxis","YAxis","domain","tickFormatter","Tooltip","isAnimationActive","content","payload","resin","ArtifactForm","useState","subStats","formData","setFormData","setChance","setChartData","mainStatOptions","subStatOptions","filter","subStat","find","useEffect","form","onChangeSubStat","pair","onChangeSubStatNumber","stringValue","spacing","index","numValue","colorScheme","onClick","onRemoveSubStat","keys","length","icon","disabled","neededSubStatList","possibleSubStats","substatsCombinations","Combination","toArray","chanceSubsMatch","countBy","subs","every","needSub","includes","matchesSubs","true","console","log","allSubstatUpgrades","i","j","push","fourUpgrades","BaseN","fiveUpgrades","initialTiers","addInitialTiers","upgradesList","flatMap","tiers","upgrades","tier","fourUpgradesWithInitial","fiveUpgradesWithInitial","getFittingUpgrades","subsTotals","forEach","statNum","key","sub","fourFittingUpgrades","fiveFittingUpgrades","calculateChance","invertedChance","cumulativeChartData","resinSpent","cumulativeInvertedChance","MainContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc00ee72.chunk.js","sourcesContent":["export enum Types {\r\n  Flower = \"Flower of Life\",\r\n  Plume = \"Plume of Death\",\r\n  Sands = \"Sands of Eon\",\r\n  Goblet = \"Goblet of Eonothem\",\r\n  Circlet = \"Circlet of Logos\",\r\n}\r\n\r\nexport enum Stats {\r\n  HPFlat = \"HP\",\r\n  HP = \"HP%\",\r\n  ATKFlat = \"ATK\",\r\n  ATK = \"ATK%\",\r\n  DEFFlat = \"DEF\", // not main\r\n  DEF = \"DEF%\",\r\n  CR = \"CRIT Rate%\",\r\n  CD = \"CRIT DMG%\",\r\n  ER = \"Energy Recharge%\",\r\n  EM = \"Elemental Mastery\",\r\n  // not sub\r\n  HB = \"Healing Bonus%\",\r\n  Pyro = \"Pyro DMG Bonus%\",\r\n  Electro = \"Electro DMG Bonus%\",\r\n  Cryo = \"Cryo DMG Bonus%\",\r\n  Hydro = \"Hydro DMG Bonus%\",\r\n  Anemo = \"Anemo DMG Bonus%\",\r\n  Geo = \"Geo DMG Bonus%\",\r\n  Physical = \"Physical DMG Bonus%\",\r\n}\r\n\r\nexport type SubStats =\r\n  | Stats.HPFlat\r\n  | Stats.HP\r\n  | Stats.ATKFlat\r\n  | Stats.ATK\r\n  | Stats.DEFFlat\r\n  | Stats.DEF\r\n  | Stats.CR\r\n  | Stats.CD\r\n  | Stats.ER\r\n  | Stats.EM;\r\n\r\nexport type MainStats =\r\n  | Stats.HPFlat\r\n  | Stats.HP\r\n  | Stats.ATKFlat\r\n  | Stats.ATK\r\n  | Stats.DEF\r\n  | Stats.CR\r\n  | Stats.CD\r\n  | Stats.ER\r\n  | Stats.EM\r\n  | Stats.HB\r\n  | Stats.Pyro\r\n  | Stats.Electro\r\n  | Stats.Cryo\r\n  | Stats.Hydro\r\n  | Stats.Anemo\r\n  | Stats.Geo\r\n  | Stats.Physical;\r\n","import _ from \"lodash/fp\";\r\nimport { MainStats, Stats, SubStats, Types } from \"./enums\";\r\n\r\nconst allSubStats: SubStats[] = [\r\n  Stats.CR,\r\n  Stats.CD,\r\n  Stats.ATK,\r\n  Stats.ATKFlat,\r\n  Stats.HP,\r\n  Stats.HPFlat,\r\n  Stats.DEF,\r\n  Stats.DEFFlat,\r\n  Stats.ER,\r\n  Stats.EM,\r\n];\r\n\r\nconst allMainStats: MainStats[] = [\r\n  Stats.HPFlat,\r\n  Stats.ATKFlat,\r\n  Stats.HP,\r\n  Stats.ATK,\r\n  Stats.DEF,\r\n  Stats.ER,\r\n  Stats.EM,\r\n  Stats.CR,\r\n  Stats.CD,\r\n  Stats.HB,\r\n  Stats.Pyro,\r\n  Stats.Electro,\r\n  Stats.Cryo,\r\n  Stats.Hydro,\r\n  Stats.Anemo,\r\n  Stats.Geo,\r\n  Stats.Physical,\r\n];\r\n\r\nexport type MainStatsByType<Type extends Types> = Type extends Types.Flower\r\n  ? Stats.HPFlat\r\n  : Type extends Types.Plume\r\n  ? Stats.ATKFlat\r\n  : Type extends Types.Sands\r\n  ? Stats.HP | Stats.ATK | Stats.DEF | Stats.ER | Stats.EM\r\n  : Type extends Types.Goblet\r\n  ?\r\n      | Stats.HP\r\n      | Stats.ATK\r\n      | Stats.DEF\r\n      | Stats.Pyro\r\n      | Stats.Electro\r\n      | Stats.Cryo\r\n      | Stats.Hydro\r\n      | Stats.Anemo\r\n      | Stats.Geo\r\n      | Stats.Physical\r\n      | Stats.EM\r\n  : Type extends Types.Circlet\r\n  ? Stats.HP | Stats.ATK | Stats.DEF | Stats.CR | Stats.CD | Stats.HB | Stats.EM\r\n  : never;\r\n\r\nexport type SubStatsByMain<MainStat extends MainStats> = Exclude<\r\n  SubStats,\r\n  MainStat\r\n>;\r\n\r\nexport const allowedMainStats: { [T in Types]: MainStatsByType<T>[] } = {\r\n  [Types.Flower]: [Stats.HPFlat],\r\n  [Types.Plume]: [Stats.ATKFlat],\r\n  [Types.Sands]: [Stats.HP, Stats.ATK, Stats.DEF, Stats.ER, Stats.EM],\r\n  [Types.Goblet]: [\r\n    Stats.HP,\r\n    Stats.ATK,\r\n    Stats.DEF,\r\n    Stats.Pyro,\r\n    Stats.Electro,\r\n    Stats.Cryo,\r\n    Stats.Hydro,\r\n    Stats.Anemo,\r\n    Stats.Geo,\r\n    Stats.Physical,\r\n    Stats.EM,\r\n  ],\r\n  [Types.Circlet]: [\r\n    Stats.HP,\r\n    Stats.ATK,\r\n    Stats.DEF,\r\n    Stats.CR,\r\n    Stats.CD,\r\n    Stats.HB,\r\n    Stats.EM,\r\n  ],\r\n};\r\n\r\n// All substats are allowed except for the duplicate of main stat\r\nexport const allowedSubStats: Record<MainStats, SubStats[]> =\r\n  allMainStats.reduce((acc, mainStat) => {\r\n    return {\r\n      ...acc,\r\n      [mainStat]: _.without([mainStat], allSubStats),\r\n    };\r\n  }, {} as Record<MainStats, SubStats[]>);\r\n","import { MainStatsByType, SubStatsByMain } from \"./combinations\";\r\nimport { Stats, SubStats, Types } from \"./enums\";\r\n\r\nexport type StatMap<T extends Types> = { [Stat in MainStatsByType<T>]: number };\r\nexport type TypeMap = { [T in Types]: StatMap<T> };\r\n\r\nexport const mainStatChances: TypeMap = {\r\n  [Types.Flower]: {\r\n    [Stats.HPFlat]: 1,\r\n  },\r\n  [Types.Plume]: {\r\n    [Stats.ATKFlat]: 1,\r\n  },\r\n  [Types.Sands]: {\r\n    [Stats.HP]: 0.2668,\r\n    [Stats.ATK]: 0.2666,\r\n    [Stats.DEF]: 0.2666,\r\n    [Stats.ER]: 0.1,\r\n    [Stats.EM]: 0.1,\r\n  },\r\n  [Types.Goblet]: {\r\n    [Stats.HP]: 0.2125,\r\n    [Stats.ATK]: 0.2125,\r\n    [Stats.DEF]: 0.2,\r\n    [Stats.Pyro]: 0.05,\r\n    [Stats.Electro]: 0.05,\r\n    [Stats.Cryo]: 0.05,\r\n    [Stats.Hydro]: 0.05,\r\n    [Stats.Anemo]: 0.05,\r\n    [Stats.Geo]: 0.05,\r\n    [Stats.Physical]: 0.05,\r\n    [Stats.EM]: 0.025,\r\n  },\r\n  [Types.Circlet]: {\r\n    [Stats.HP]: 0.22,\r\n    [Stats.ATK]: 0.22,\r\n    [Stats.DEF]: 0.22,\r\n    [Stats.CR]: 0.1,\r\n    [Stats.CD]: 0.1,\r\n    [Stats.HB]: 0.1,\r\n    [Stats.EM]: 0.04,\r\n  },\r\n};\r\n\r\nconst dmgBonusChances: {\r\n  [SubStat in SubStatsByMain<Stats.Physical>]: number;\r\n} = {\r\n  [Stats.HPFlat]: 0.1364,\r\n  [Stats.ATKFlat]: 0.1364,\r\n  [Stats.DEFFlat]: 0.1364,\r\n  [Stats.HP]: 0.0909,\r\n  [Stats.ATK]: 0.0909,\r\n  [Stats.DEF]: 0.0909,\r\n  [Stats.ER]: 0.0909,\r\n  [Stats.EM]: 0.0909,\r\n  [Stats.CR]: 0.0682,\r\n  [Stats.CD]: 0.0682,\r\n};\r\n\r\nexport const subStatChances: {\r\n  [T in Types]: {\r\n    [MainStat in MainStatsByType<T>]: {\r\n      [SubStat in SubStatsByMain<MainStat>]: number;\r\n    };\r\n  };\r\n} = {\r\n  [Types.Flower]: {\r\n    [Stats.HPFlat]: {\r\n      [Stats.ATKFlat]: 0.1579,\r\n      [Stats.DEFFlat]: 0.1579,\r\n      [Stats.HP]: 0.1053,\r\n      [Stats.ATK]: 0.1053,\r\n      [Stats.DEF]: 0.1053,\r\n      [Stats.ER]: 0.1053,\r\n      [Stats.EM]: 0.1053,\r\n      [Stats.CR]: 0.0789,\r\n      [Stats.CD]: 0.0789,\r\n    },\r\n  },\r\n  [Types.Plume]: {\r\n    [Stats.ATKFlat]: {\r\n      [Stats.HPFlat]: 0.1579,\r\n      [Stats.DEFFlat]: 0.1579,\r\n      [Stats.HP]: 0.1053,\r\n      [Stats.ATK]: 0.1053,\r\n      [Stats.DEF]: 0.1053,\r\n      [Stats.ER]: 0.1053,\r\n      [Stats.EM]: 0.1053,\r\n      [Stats.CR]: 0.0789,\r\n      [Stats.CD]: 0.0789,\r\n    },\r\n  },\r\n  [Types.Sands]: {\r\n    [Stats.HP]: {\r\n      [Stats.HPFlat]: 0.15,\r\n      [Stats.ATKFlat]: 0.15,\r\n      [Stats.DEFFlat]: 0.15,\r\n      [Stats.ATK]: 0.1,\r\n      [Stats.DEF]: 0.1,\r\n      [Stats.ER]: 0.1,\r\n      [Stats.EM]: 0.1,\r\n      [Stats.CR]: 0.075,\r\n      [Stats.CD]: 0.075,\r\n    },\r\n    [Stats.ATK]: {\r\n      [Stats.HPFlat]: 0.15,\r\n      [Stats.ATKFlat]: 0.15,\r\n      [Stats.DEFFlat]: 0.15,\r\n      [Stats.HP]: 0.1,\r\n      [Stats.DEF]: 0.1,\r\n      [Stats.ER]: 0.1,\r\n      [Stats.EM]: 0.1,\r\n      [Stats.CR]: 0.075,\r\n      [Stats.CD]: 0.075,\r\n    },\r\n    [Stats.DEF]: {\r\n      [Stats.HPFlat]: 0.15,\r\n      [Stats.ATKFlat]: 0.15,\r\n      [Stats.DEFFlat]: 0.15,\r\n      [Stats.HP]: 0.1,\r\n      [Stats.ATK]: 0.1,\r\n      [Stats.ER]: 0.1,\r\n      [Stats.EM]: 0.1,\r\n      [Stats.CR]: 0.075,\r\n      [Stats.CD]: 0.075,\r\n    },\r\n    [Stats.ER]: {\r\n      [Stats.HPFlat]: 0.15,\r\n      [Stats.ATKFlat]: 0.15,\r\n      [Stats.DEFFlat]: 0.15,\r\n      [Stats.HP]: 0.1,\r\n      [Stats.ATK]: 0.1,\r\n      [Stats.DEF]: 0.1,\r\n      [Stats.EM]: 0.1,\r\n      [Stats.CR]: 0.075,\r\n      [Stats.CD]: 0.075,\r\n    },\r\n    [Stats.EM]: {\r\n      [Stats.HPFlat]: 0.15,\r\n      [Stats.ATKFlat]: 0.15,\r\n      [Stats.DEFFlat]: 0.15,\r\n      [Stats.HP]: 0.1,\r\n      [Stats.ATK]: 0.1,\r\n      [Stats.DEF]: 0.1,\r\n      [Stats.ER]: 0.1,\r\n      [Stats.CR]: 0.075,\r\n      [Stats.CD]: 0.075,\r\n    },\r\n  },\r\n  [Types.Goblet]: {\r\n    [Stats.HP]: {\r\n      [Stats.HPFlat]: 0.15,\r\n      [Stats.ATKFlat]: 0.15,\r\n      [Stats.DEFFlat]: 0.15,\r\n      [Stats.DEF]: 0.1,\r\n      [Stats.ATK]: 0.1,\r\n      [Stats.ER]: 0.1,\r\n      [Stats.EM]: 0.1,\r\n      [Stats.CR]: 0.075,\r\n      [Stats.CD]: 0.075,\r\n    },\r\n    [Stats.ATK]: {\r\n      [Stats.HPFlat]: 0.15,\r\n      [Stats.ATKFlat]: 0.15,\r\n      [Stats.DEFFlat]: 0.15,\r\n      [Stats.DEF]: 0.1,\r\n      [Stats.HP]: 0.1,\r\n      [Stats.ER]: 0.1,\r\n      [Stats.EM]: 0.1,\r\n      [Stats.CR]: 0.075,\r\n      [Stats.CD]: 0.075,\r\n    },\r\n    [Stats.DEF]: {\r\n      [Stats.HPFlat]: 0.15,\r\n      [Stats.ATKFlat]: 0.15,\r\n      [Stats.DEFFlat]: 0.15,\r\n      [Stats.ATK]: 0.1,\r\n      [Stats.HP]: 0.1,\r\n      [Stats.ER]: 0.1,\r\n      [Stats.EM]: 0.1,\r\n      [Stats.CR]: 0.075,\r\n      [Stats.CD]: 0.075,\r\n    },\r\n    [Stats.Pyro]: dmgBonusChances,\r\n    [Stats.Electro]: dmgBonusChances,\r\n    [Stats.Cryo]: dmgBonusChances,\r\n    [Stats.Hydro]: dmgBonusChances,\r\n    [Stats.Anemo]: dmgBonusChances,\r\n    [Stats.Geo]: dmgBonusChances,\r\n    [Stats.Physical]: dmgBonusChances,\r\n    [Stats.EM]: {\r\n      [Stats.HPFlat]: 0.15,\r\n      [Stats.ATKFlat]: 0.15,\r\n      [Stats.DEFFlat]: 0.15,\r\n      [Stats.ATK]: 0.1,\r\n      [Stats.HP]: 0.1,\r\n      [Stats.DEF]: 0.1,\r\n      [Stats.ER]: 0.1,\r\n      [Stats.CR]: 0.075,\r\n      [Stats.CD]: 0.075,\r\n    },\r\n  },\r\n  [Types.Circlet]: {\r\n    [Stats.HP]: {\r\n      [Stats.HPFlat]: 0.15,\r\n      [Stats.ATKFlat]: 0.15,\r\n      [Stats.DEFFlat]: 0.15,\r\n      [Stats.DEF]: 0.1,\r\n      [Stats.ATK]: 0.1,\r\n      [Stats.ER]: 0.1,\r\n      [Stats.EM]: 0.1,\r\n      [Stats.CR]: 0.075,\r\n      [Stats.CD]: 0.075,\r\n    },\r\n    [Stats.ATK]: {\r\n      [Stats.HPFlat]: 0.15,\r\n      [Stats.ATKFlat]: 0.15,\r\n      [Stats.DEFFlat]: 0.15,\r\n      [Stats.DEF]: 0.1,\r\n      [Stats.HP]: 0.1,\r\n      [Stats.ER]: 0.1,\r\n      [Stats.EM]: 0.1,\r\n      [Stats.CR]: 0.075,\r\n      [Stats.CD]: 0.075,\r\n    },\r\n    [Stats.DEF]: {\r\n      [Stats.HPFlat]: 0.15,\r\n      [Stats.ATKFlat]: 0.15,\r\n      [Stats.DEFFlat]: 0.15,\r\n      [Stats.ATK]: 0.1,\r\n      [Stats.HP]: 0.1,\r\n      [Stats.ER]: 0.1,\r\n      [Stats.EM]: 0.1,\r\n      [Stats.CR]: 0.075,\r\n      [Stats.CD]: 0.075,\r\n    },\r\n    [Stats.CR]: {\r\n      [Stats.HPFlat]: 0.1463,\r\n      [Stats.ATKFlat]: 0.1463,\r\n      [Stats.DEFFlat]: 0.1463,\r\n      [Stats.ATK]: 0.0976,\r\n      [Stats.HP]: 0.0976,\r\n      [Stats.DEF]: 0.0976,\r\n      [Stats.ER]: 0.0976,\r\n      [Stats.EM]: 0.0976,\r\n      [Stats.CD]: 0.0732,\r\n    },\r\n    [Stats.CD]: {\r\n      [Stats.HPFlat]: 0.1463,\r\n      [Stats.ATKFlat]: 0.1463,\r\n      [Stats.DEFFlat]: 0.1463,\r\n      [Stats.ATK]: 0.0976,\r\n      [Stats.HP]: 0.0976,\r\n      [Stats.DEF]: 0.0976,\r\n      [Stats.ER]: 0.0976,\r\n      [Stats.EM]: 0.0976,\r\n      [Stats.CR]: 0.0732,\r\n    },\r\n    [Stats.HB]: dmgBonusChances,\r\n    [Stats.EM]: {\r\n      [Stats.HPFlat]: 0.15,\r\n      [Stats.ATKFlat]: 0.15,\r\n      [Stats.DEFFlat]: 0.15,\r\n      [Stats.ATK]: 0.1,\r\n      [Stats.HP]: 0.1,\r\n      [Stats.DEF]: 0.1,\r\n      [Stats.ER]: 0.1,\r\n      [Stats.CR]: 0.075,\r\n      [Stats.CD]: 0.075,\r\n    },\r\n  },\r\n};\r\n\r\nexport const upgradeTiers: Record<SubStats, [number, number, number, number]> =\r\n  {\r\n    [Stats.HPFlat]: [209, 239, 269, 299],\r\n    [Stats.HP]: [4.1, 4.7, 5.3, 5.8],\r\n    [Stats.ATKFlat]: [14, 16, 18, 19],\r\n    [Stats.ATK]: [4.1, 4.7, 5.3, 5.8],\r\n    [Stats.DEFFlat]: [16, 19, 21, 23],\r\n    [Stats.DEF]: [5.1, 5.8, 6.6, 7.3],\r\n    [Stats.CR]: [2.7, 3.1, 3.5, 3.9],\r\n    [Stats.CD]: [5.4, 6.2, 7.0, 7.8],\r\n    [Stats.ER]: [4.5, 5.2, 5.8, 6.5],\r\n    [Stats.EM]: [16, 19, 21, 23],\r\n  };\r\n","import { useCallback } from \"react\";\r\nimport {\r\n  Select as ChakraSelect,\r\n  SelectProps as ChakraSelectProps,\r\n} from \"@chakra-ui/select\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Option = styled.option`\r\n  color: black;\r\n  background: lightgrey;\r\n`;\r\n\r\ntype SelectProps<T extends string> = {\r\n  onChange: (selected: T) => void;\r\n  items: { label: string; value: T }[];\r\n  value: T | undefined;\r\n} & Omit<ChakraSelectProps, \"onChange\" | \"value\">;\r\n\r\nexport function Select<T extends string>({\r\n  onChange,\r\n  value,\r\n  items,\r\n  ...rest\r\n}: SelectProps<T>) {\r\n  const onChangeSelect = useCallback(\r\n    (event) => {\r\n      const value = event.target.value as T;\r\n      onChange(value);\r\n    },\r\n    [onChange]\r\n  );\r\n\r\n  return (\r\n    <ChakraSelect onChange={onChangeSelect} value={value} {...rest}>\r\n      {items.map((item) => {\r\n        return (\r\n          <Option key={item.value} value={item.value}>\r\n            {item.label}\r\n          </Option>\r\n        );\r\n      })}\r\n    </ChakraSelect>\r\n  );\r\n}\r\n","import _ from \"lodash/fp\";\r\n\r\nexport const getMeaningfulPercents = (value: number): string => {\r\n  let formattedChance: string = \"0%\";\r\n  if (_.isNil(value)) {\r\n    return \"\";\r\n  }\r\n  if (value === 0) {\r\n    return formattedChance;\r\n  }\r\n  let n = 0,\r\n    num = 0;\r\n  while (n < 12) {\r\n    num = value * 100 * Math.pow(10, n);\r\n    if (num > 1) {\r\n      break;\r\n    }\r\n    n++;\r\n  }\r\n  return (value * 100).toFixed(n + 2) + \"%\";\r\n};\r\n","import {\r\n  Button,\r\n  IconButton,\r\n  Text,\r\n  Box,\r\n  FormControl,\r\n  FormLabel,\r\n  VStack,\r\n  NumberInput,\r\n  HStack,\r\n  NumberInputField,\r\n  CloseButton,\r\n  Flex,\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n  PopoverBody,\r\n  PopoverArrow,\r\n  PopoverCloseButton,\r\n  Link,\r\n} from \"@chakra-ui/react\";\r\nimport styled from \"styled-components\";\r\nimport { useState, useEffect, memo } from \"react\";\r\nimport { MdAddCircle } from \"react-icons/md\";\r\nimport { FaRegQuestionCircle } from \"react-icons/fa\";\r\nimport _ from \"lodash/fp\";\r\n\r\nimport { allowedMainStats, allowedSubStats } from \"../data/combinations\";\r\nimport { MainStats, SubStats, Types } from \"../data/enums\";\r\nimport { calculateChance } from \"../utils/calculateChance\";\r\nimport { Select } from \"./Select\";\r\nimport { getMeaningfulPercents } from \"../utils/formatNumber\";\r\nimport {\r\n  Area,\r\n  AreaChart,\r\n  CartesianGrid,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from \"recharts\";\r\n\r\ninterface FormData {\r\n  type: Types;\r\n  mainStat?: MainStats;\r\n  subStats: [SubStats, number][];\r\n}\r\n\r\ninterface ChartDataEntry {\r\n  resin: number;\r\n  chance: number;\r\n}\r\n\r\nconst typeOptions: { value: Types; label: string }[] = _.values(Types).map(\r\n  (type) => ({ label: type, value: type })\r\n);\r\n\r\nconst TooltipContainer = styled.div`\r\n  border-radius: 5px;\r\n  background: #313743;\r\n  padding: 5px 10px;\r\n  border: 1px solid white;\r\n`;\r\n\r\nconst QuestionIconContainer = styled.div`\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ResultsBox = memo(\r\n  ({ chance, chartData }: { chance: number; chartData: ChartDataEntry[] }) => {\r\n    return (\r\n      <Box\r\n        margin={1}\r\n        maxW=\"95%\"\r\n        width=\"lg\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        padding={2}\r\n        paddingLeft={4}\r\n      >\r\n        <Flex alignItems=\"baseline\" flexFlow=\"row nowrap\">\r\n          <Text>Chance in one run (20 resin):</Text>\r\n          <Text\r\n            paddingLeft={2}\r\n            paddingRight={2}\r\n            fontSize=\"large\"\r\n            fontWeight=\"bold\"\r\n          >\r\n            {getMeaningfulPercents(chance)}\r\n          </Text>\r\n          <Popover>\r\n            <PopoverTrigger>\r\n              <QuestionIconContainer>\r\n                <FaRegQuestionCircle />\r\n              </QuestionIconContainer>\r\n            </PopoverTrigger>\r\n            <PopoverContent color=\"black\" width={\"70%\"}>\r\n              <PopoverArrow />\r\n              <PopoverCloseButton />\r\n              <PopoverBody>\r\n                <Text fontWeight=\"bold\" marginRight={6}>\r\n                  This calculation assumes the following:\r\n                </Text>\r\n                <Text>5* artifacts upgraded to +20;</Text>\r\n                <Text>\r\n                  1.07 artifacts per run on average;{\" \"}\r\n                  <Link\r\n                    color=\"teal\"\r\n                    isExternal\r\n                    href=\"https://docs.google.com/spreadsheets/d/1RcuniapqS6nOP05OCH0ui10Vo3bWu0AvFbhgcHzTybY/edit\"\r\n                  >\r\n                    Source\r\n                  </Link>\r\n                </Text>\r\n                <Text>50% chance to get one of the two sets;</Text>\r\n                <Text>20% chance to get the correct artifact type;</Text>\r\n                <Text>\r\n                  Chance to get the correct main stat and sub-stats;{\" \"}\r\n                  <Link\r\n                    color=\"teal\"\r\n                    isExternal\r\n                    href=\"https://genshin-impact.fandom.com/wiki/Artifacts/Distribution\"\r\n                  >\r\n                    Source 1\r\n                  </Link>\r\n                  {\", \"}\r\n                  <Link\r\n                    color=\"teal\"\r\n                    isExternal\r\n                    href=\"https://docs.google.com/spreadsheets/d/1sYQrV5Yp_QTVEKMLWquMu0mDgHhOO_Rh2LfcWdS_Eno/edit\"\r\n                  >\r\n                    Source 2\r\n                  </Link>\r\n                </Text>\r\n                <Text marginTop={2}>\r\n                  Note: chance to get 4 initial sub-stats is assumed to be 25%.\r\n                </Text>\r\n                <Text>\r\n                  Contact me at{\" \"}\r\n                  <Link\r\n                    color=\"teal\"\r\n                    isExternal\r\n                    href=\"https://www.reddit.com/message/compose/?to=grumd\"\r\n                  >\r\n                    /u/grumd\r\n                  </Link>{\" \"}\r\n                  if you have more accurate information.\r\n                </Text>\r\n              </PopoverBody>\r\n            </PopoverContent>\r\n          </Popover>\r\n        </Flex>\r\n        <Text>Cumulative chance to get this artifact at least once:</Text>\r\n        {chance > 0 && !_.isEmpty(chartData) && (\r\n          <ResponsiveContainer width=\"100%\" aspect={2.5}>\r\n            <AreaChart\r\n              data={chartData}\r\n              margin={{ top: 5, right: 5, bottom: 5, left: 0 }}\r\n            >\r\n              <defs>\r\n                <linearGradient id=\"colorGrad\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                  <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\r\n                  <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\r\n                </linearGradient>\r\n              </defs>\r\n              <Area\r\n                fillOpacity={1}\r\n                fill=\"url(#colorGrad)\"\r\n                type=\"monotone\"\r\n                dataKey=\"chance\"\r\n                stroke=\"#8884d8\"\r\n              />\r\n              <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n              <XAxis dataKey=\"resin\" />\r\n              <YAxis\r\n                domain={[0, 1]}\r\n                tickFormatter={(value) => (value * 100).toFixed(0) + \"%\"}\r\n              />\r\n              <Tooltip\r\n                isAnimationActive={false}\r\n                content={({ payload }) => {\r\n                  const item = payload?.[0]?.payload;\r\n                  if (item) {\r\n                    return (\r\n                      <TooltipContainer>\r\n                        <div>Resin: {item.resin}</div>\r\n                        <div>Days: {item.resin / 160}</div>\r\n                        <div>Chance: {getMeaningfulPercents(item.chance)}</div>\r\n                      </TooltipContainer>\r\n                    );\r\n                  }\r\n                  return null;\r\n                }}\r\n              />\r\n            </AreaChart>\r\n          </ResponsiveContainer>\r\n        )}\r\n      </Box>\r\n    );\r\n  }\r\n);\r\n\r\nexport function ArtifactForm() {\r\n  const [formData, setFormData] = useState<FormData>({\r\n    type: Types.Flower,\r\n    subStats: [],\r\n  });\r\n  const [chance, setChance] = useState<number | null>(null);\r\n  const [chartData, setChartData] = useState<ChartDataEntry[]>([]);\r\n\r\n  const onChangeType = (value: Types) => {\r\n    setFormData({ type: value, subStats: [] }); // reset all\r\n  };\r\n\r\n  const onChangeMainStat = (value: MainStats) => {\r\n    setFormData((form) => ({ ...form, mainStat: value, subStats: [] })); // reset sub stats\r\n  };\r\n\r\n  const mainStatOptions = allowedMainStats[formData.type].map((mainStat) => ({\r\n    label: mainStat,\r\n    value: mainStat,\r\n  }));\r\n\r\n  const subStatList = formData.mainStat\r\n    ? allowedSubStats[formData.mainStat]\r\n    : [];\r\n  const subStatOptions = subStatList\r\n    .filter((subStat) => !formData.subStats.find(([s]) => s === subStat))\r\n    .map((subStat) => ({\r\n      label: subStat,\r\n      value: subStat,\r\n    }));\r\n\r\n  useEffect(() => {\r\n    if (!formData.mainStat) {\r\n      setFormData((form) => ({ ...form, mainStat: mainStatOptions[0].value }));\r\n    }\r\n  }, [formData.mainStat, mainStatOptions]);\r\n\r\n  const onAddSubStats = () => {\r\n    if (subStatOptions.length) {\r\n      setFormData((form) => ({\r\n        ...form,\r\n        subStats: [...form.subStats, [subStatOptions[0].value, 0]],\r\n      }));\r\n    }\r\n  };\r\n\r\n  const onChangeSubStat = (subStat: SubStats) => (value: SubStats) => {\r\n    setFormData((form) => ({\r\n      ...form,\r\n      subStats: form.subStats.map((pair) =>\r\n        pair[0] === subStat ? [value, 0] : pair\r\n      ),\r\n    }));\r\n  };\r\n\r\n  const onChangeSubStatNumber =\r\n    (subStat: SubStats) => (stringValue: string, value: number) => {\r\n      setFormData((form) => ({\r\n        ...form,\r\n        subStats: form.subStats.map((pair) =>\r\n          pair[0] === subStat ? [subStat, value] : pair\r\n        ),\r\n      }));\r\n    };\r\n\r\n  const onRemoveSubStat = (subStat: SubStats) => {\r\n    setFormData((form) => ({\r\n      ...form,\r\n      subStats: form.subStats.filter((pair) => pair[0] !== subStat),\r\n    }));\r\n  };\r\n\r\n  const onCalculate = () => {\r\n    if (formData.mainStat) {\r\n      const chance = calculateChance({\r\n        type: formData.type,\r\n        mainStat: formData.mainStat,\r\n        subStats: formData.subStats.reduce((acc, [subStat, value]) => {\r\n          return {\r\n            ...acc,\r\n            [subStat]: value,\r\n          };\r\n        }, {}),\r\n      });\r\n      const invertedChance = 1 - chance;\r\n      const cumulativeChartData: { resin: number; chance: number }[] = [];\r\n      let resinSpent = 0,\r\n        cumulativeInvertedChance = 1;\r\n      // 2920 is 365 days of 8 domain runs per day\r\n      for (let i = 0; i < 2920; i++) {\r\n        if (cumulativeInvertedChance < 0.05) {\r\n          break;\r\n        }\r\n        resinSpent += 20;\r\n        cumulativeInvertedChance *= invertedChance;\r\n        cumulativeChartData.push({\r\n          resin: resinSpent,\r\n          chance: 1 - cumulativeInvertedChance,\r\n        });\r\n      }\r\n      setChartData(cumulativeChartData);\r\n      setChance(chance);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Flex flexFlow=\"column wrap\" width=\"100%\" alignItems=\"center\">\r\n      <Box\r\n        margin={1}\r\n        maxW=\"95%\"\r\n        width=\"lg\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        padding={2}\r\n      >\r\n        <VStack padding=\"2\" spacing=\"4\">\r\n          <FormControl id=\"type\">\r\n            <FormLabel>Artifact type:</FormLabel>\r\n            <Select\r\n              value={formData.type}\r\n              items={typeOptions}\r\n              onChange={onChangeType}\r\n            />\r\n          </FormControl>\r\n          <FormControl id=\"mainStat\">\r\n            <FormLabel>Main stat:</FormLabel>\r\n            <Select\r\n              value={formData.mainStat}\r\n              items={mainStatOptions}\r\n              onChange={onChangeMainStat}\r\n            />\r\n          </FormControl>\r\n          <FormControl id=\"subStat\">\r\n            <FormLabel>Sub stats (optional):</FormLabel>\r\n            <VStack alignItems=\"start\" width=\"100%\">\r\n              {formData.subStats.map((value, index) => {\r\n                const [subStat, numValue] = value;\r\n                return (\r\n                  <HStack key={`substat-${index}`} width=\"100%\">\r\n                    <FormControl id={`substat-${index}-name`}>\r\n                      <Select\r\n                        value={subStat}\r\n                        items={[\r\n                          { label: subStat, value: subStat },\r\n                          ...subStatOptions,\r\n                        ]}\r\n                        onChange={onChangeSubStat(subStat)}\r\n                      />\r\n                    </FormControl>\r\n                    <Text fontWeight=\"bold\" fontSize=\"large\">\r\n                      {\">=\"}\r\n                    </Text>\r\n                    <FormControl id={`substat-${index}-value`}>\r\n                      <NumberInput\r\n                        value={numValue}\r\n                        onChange={onChangeSubStatNumber(subStat)}\r\n                      >\r\n                        <NumberInputField />\r\n                      </NumberInput>\r\n                    </FormControl>\r\n                    <CloseButton\r\n                      colorScheme=\"blue\"\r\n                      onClick={() => onRemoveSubStat(subStat)}\r\n                    />\r\n                  </HStack>\r\n                );\r\n              })}\r\n              <FormControl>\r\n                {_.keys(formData.subStats).length < 4 && (\r\n                  <IconButton\r\n                    color=\"white\"\r\n                    fontSize=\"2xl\"\r\n                    colorScheme=\"purple\"\r\n                    aria-label=\"Add substat\"\r\n                    onClick={onAddSubStats}\r\n                    icon={<MdAddCircle />}\r\n                  />\r\n                )}\r\n              </FormControl>\r\n            </VStack>\r\n          </FormControl>\r\n          <Button\r\n            disabled={!formData.mainStat}\r\n            colorScheme=\"pink\"\r\n            onClick={onCalculate}\r\n          >\r\n            Calculate (may take several seconds)\r\n          </Button>\r\n        </VStack>\r\n      </Box>\r\n      {!_.isNil(chance) && (\r\n        <ResultsBox chance={chance} chartData={chartData}></ResultsBox>\r\n      )}\r\n    </Flex>\r\n  );\r\n}\r\n","import { BaseN, Combination } from \"js-combinatorics\";\r\nimport _ from \"lodash/fp\";\r\n\r\nimport { mainStatChances, StatMap, upgradeTiers } from \"../data/chances\";\r\nimport {\r\n  allowedSubStats,\r\n  MainStatsByType,\r\n  SubStatsByMain,\r\n} from \"../data/combinations\";\r\nimport { MainStats, SubStats, Types } from \"../data/enums\";\r\n\r\ninterface CalculateOptions<\r\n  T extends Types,\r\n  M extends MainStatsByType<T>,\r\n  Subs extends SubStatsByMain<M>\r\n> {\r\n  type: T;\r\n  mainStat: M;\r\n  subStats?: {\r\n    [Sub in Subs]?: number;\r\n  };\r\n}\r\n\r\nconst chanceOfFourSubs = 0.25;\r\n\r\nexport const calculateChance = <\r\n  T extends Types,\r\n  M extends MainStatsByType<T>,\r\n  Subs extends SubStatsByMain<M>\r\n>({\r\n  type,\r\n  mainStat,\r\n  subStats = {},\r\n}: CalculateOptions<T, M, Subs>): number => {\r\n  // Base chance is 1.07 because of https://docs.google.com/spreadsheets/d/1RcuniapqS6nOP05OCH0ui10Vo3bWu0AvFbhgcHzTybY/edit#gid=2061598189\r\n  // 1.07 is the average number of 5* artifacts from one run of a domain\r\n  let chance = 1.07;\r\n\r\n  // Getting the correct artifact set\r\n  chance *= 0.5;\r\n\r\n  // Getting the correct type\r\n  chance *= 0.2;\r\n\r\n  // Getting the correct main stat\r\n  const byTypes: StatMap<Types> = mainStatChances[type]; // TS hack because TS can't index these mapped types :(\r\n  chance *= byTypes[mainStat];\r\n\r\n  // Getting all the sub-stats we need\r\n  const neededSubStatList = _.keys(subStats) as Subs[];\r\n  if (neededSubStatList.length > 0) {\r\n    const possibleSubStats = allowedSubStats[mainStat as MainStats];\r\n    const substatsCombinations = new Combination(possibleSubStats, 4).toArray();\r\n    const matchesSubs = _.countBy((subs: SubStats[]) =>\r\n      neededSubStatList.every((needSub) => subs.includes(needSub))\r\n    );\r\n    const matchedSubstatsCount = matchesSubs(substatsCombinations).true || 0;\r\n    const chanceSubsMatch = matchedSubstatsCount / substatsCombinations.length;\r\n    console.log(\"Getting initial substats that fit criteria\", chanceSubsMatch);\r\n\r\n    chance *= chanceSubsMatch;\r\n\r\n    // Getting enough substats to match the number\r\n    const allSubstatUpgrades: [number, number][] = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      // every tier of upgrade\r\n      for (let j = 0; j < 4; j++) {\r\n        // every substat\r\n        allSubstatUpgrades.push([j, i]);\r\n      }\r\n    }\r\n    const fourUpgrades = new BaseN(allSubstatUpgrades, 4).toArray();\r\n    const fiveUpgrades = new BaseN(allSubstatUpgrades, 5).toArray();\r\n\r\n    const initialTiers = new BaseN(\r\n      [0, 1, 2, 3],\r\n      neededSubStatList.length\r\n    ).toArray();\r\n\r\n    const addInitialTiers = (\r\n      upgradesList: [number, number][][]\r\n    ): [number, number][][] =>\r\n      _.flatMap((tiers) => {\r\n        return upgradesList.map((upgrades) => [\r\n          ...tiers.map((tier, index): [number, number] => [index, tier]),\r\n          ...upgrades,\r\n        ]);\r\n      }, initialTiers);\r\n\r\n    const fourUpgradesWithInitial = addInitialTiers(fourUpgrades);\r\n    const fiveUpgradesWithInitial = addInitialTiers(fiveUpgrades);\r\n\r\n    const getFittingUpgrades = _.filter<[number, number][]>((upgrades) => {\r\n      const subsTotals: Partial<Record<SubStats, number>> = {};\r\n      upgrades.forEach(([statNum, tier]) => {\r\n        if (neededSubStatList.length > statNum) {\r\n          // only upgrades that affect the substats we need matter to us, ignore the rest\r\n          const key = neededSubStatList[statNum];\r\n          subsTotals[key] =\r\n            ((subsTotals[key] as number) || 0) + upgradeTiers[key][tier];\r\n        }\r\n      });\r\n      const isFitting = neededSubStatList.every(\r\n        (sub) => subStats[sub] <= (subsTotals[sub] || 0)\r\n      );\r\n      // isFitting && console.log(isFitting, subsTotals, subStats, upgrades);\r\n      return isFitting;\r\n    });\r\n\r\n    const fourFittingUpgrades = getFittingUpgrades(fourUpgradesWithInitial);\r\n    const fiveFittingUpgrades = getFittingUpgrades(fiveUpgradesWithInitial);\r\n    console.log(\r\n      \"Getting desired with 4 upgrades:\",\r\n      fourFittingUpgrades.length,\r\n      fourUpgradesWithInitial.length,\r\n      fourFittingUpgrades.length / fourUpgradesWithInitial.length\r\n    );\r\n    console.log(\r\n      \"Getting desired with 5 upgrades:\",\r\n      fiveFittingUpgrades.length,\r\n      fiveUpgradesWithInitial.length,\r\n      fiveFittingUpgrades.length / fiveUpgradesWithInitial.length\r\n    );\r\n\r\n    chance *=\r\n      chanceOfFourSubs *\r\n        (fiveFittingUpgrades.length / fiveUpgradesWithInitial.length) +\r\n      ((1 - chanceOfFourSubs) * fourFittingUpgrades.length) /\r\n        fourUpgradesWithInitial.length;\r\n  }\r\n  return chance;\r\n};\r\n","import styled from \"styled-components\";\nimport { ArtifactForm } from \"./components/ArtifactForm\";\n\nconst MainContainer = styled.div`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: white;\n`;\n\nfunction App() {\n  return (\n    <MainContainer>\n      <ArtifactForm />\n    </MainContainer>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}