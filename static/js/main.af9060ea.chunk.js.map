{"version":3,"sources":["utils/calculateChance.worker.ts","data/enums.ts","components/Popup.tsx","utils/formatNumber.ts","components/ResultsBox.tsx","components/Select.tsx","data/combinations.ts","components/ArtifactForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["addMethods","methods","module","exports","w","Worker","name","Types","Stats","PopupContent","styled","div","Popup","target","content","useState","visible","setVisible","referenceElement","setReferenceElement","popperElement","setPopperElement","arrowElement","setArrowElement","usePopper","modifiers","options","element","padding","styles","attributes","outsideClickReferences","useMemo","current","useOnclickOutside","refs","ignoreClass","disabled","ref","onClick","vis","className","style","popper","arrow","getMeaningfulPercents","value","_","isNil","Number","isFinite","n","Math","pow","toFixed","replace","rtf","Intl","RelativeTimeFormat","numeric","getResinDays","resinPerDay","format","round","TooltipContainer","QuestionIconContainer","ResinInput","NumberInput","ResultsBox","memo","chances","resinPerDayString","setResinPerDay","converted","isNaN","chance","chartData","invertedChance","cumulativeChartData","resinSpent","cumulativeInvertedChance","runsPerDay","floor","step","i","push","resin","margin","maxW","width","borderWidth","borderRadius","paddingLeft","isNumber","chanceSubsMatch","alignItems","flexFlow","paddingRight","fontSize","fontWeight","upgradeChance","marginRight","color","isExternal","href","marginTop","css","min","defaultValue","onChange","isEmpty","ResponsiveContainer","aspect","AreaChart","data","top","right","bottom","left","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","fillOpacity","fill","type","dataKey","stroke","CartesianGrid","strokeDasharray","XAxis","minTickGap","tickFormatter","YAxis","domain","Tooltip","isAnimationActive","payload","item","Option","option","Select","items","rest","onChangeSelect","useCallback","event","map","label","allSubStats","CR","CD","ATK","ATKFlat","HP","HPFlat","DEF","DEFFlat","ER","EM","allMainStats","HB","Pyro","Electro","Cryo","Hydro","Anemo","Geo","Physical","Dendro","allowedMainStats","Flower","Plume","Sands","Goblet","Circlet","allowedSubStats","reduce","acc","mainStat","without","workerInstance","WorkerCalculateChance","typeOptions","values","ArtifactForm","acceptBothSets","subStats","formData","setFormData","setChances","calculating","setCalculating","mainStatOptions","subStatOptions","filter","subStat","find","useEffect","form","onChangeSubStat","pair","onChangeSubStatNumber","stringValue","onCalculate","a","performance","mark","calculateChance","measure","getEntriesByType","forEach","perfMeasure","console","log","duration","clearMarks","clearMeasures","spacing","display","cursor","htmlFor","size","mb","checked","isChecked","index","colorScheme","onRemoveSubStat","keys","length","icon","isLoading","MainContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af9060ea.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"calculateChance\",\"Worker\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"496ffebe93a5d82d2a84.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","export enum Types {\r\n  Flower = \"Flower of Life\",\r\n  Plume = \"Plume of Death\",\r\n  Sands = \"Sands of Eon\",\r\n  Goblet = \"Goblet of Eonothem\",\r\n  Circlet = \"Circlet of Logos\",\r\n}\r\n\r\nexport enum Stats {\r\n  HPFlat = \"HP\",\r\n  HP = \"HP%\",\r\n  ATKFlat = \"ATK\",\r\n  ATK = \"ATK%\",\r\n  DEFFlat = \"DEF\", // not main\r\n  DEF = \"DEF%\",\r\n  CR = \"CRIT Rate%\",\r\n  CD = \"CRIT DMG%\",\r\n  ER = \"Energy Recharge%\",\r\n  EM = \"Elemental Mastery\",\r\n  // not sub\r\n  HB = \"Healing Bonus%\",\r\n  Pyro = \"Pyro DMG Bonus%\",\r\n  Electro = \"Electro DMG Bonus%\",\r\n  Cryo = \"Cryo DMG Bonus%\",\r\n  Hydro = \"Hydro DMG Bonus%\",\r\n  Anemo = \"Anemo DMG Bonus%\",\r\n  Geo = \"Geo DMG Bonus%\",\r\n  Physical = \"Physical DMG Bonus%\",\r\n  Dendro = \"Dendro DMG Bonus%\",\r\n}\r\n\r\nexport type SubStats =\r\n  | Stats.HPFlat\r\n  | Stats.HP\r\n  | Stats.ATKFlat\r\n  | Stats.ATK\r\n  | Stats.DEFFlat\r\n  | Stats.DEF\r\n  | Stats.CR\r\n  | Stats.CD\r\n  | Stats.ER\r\n  | Stats.EM;\r\n\r\nexport type MainStats =\r\n  | Stats.HPFlat\r\n  | Stats.HP\r\n  | Stats.ATKFlat\r\n  | Stats.ATK\r\n  | Stats.DEF\r\n  | Stats.CR\r\n  | Stats.CD\r\n  | Stats.ER\r\n  | Stats.EM\r\n  | Stats.HB\r\n  | Stats.Pyro\r\n  | Stats.Electro\r\n  | Stats.Cryo\r\n  | Stats.Hydro\r\n  | Stats.Anemo\r\n  | Stats.Geo\r\n  | Stats.Physical\r\n  | Stats.Dendro;\r\n","import React, { useState, useMemo } from \"react\";\r\nimport { usePopper } from \"react-popper\";\r\nimport useOnclickOutside from \"react-cool-onclickoutside\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface PopupProps {\r\n  target: JSX.Element;\r\n  content: JSX.Element;\r\n}\r\n\r\nconst PopupContent = styled.div`\r\n  background: #333b4d;\r\n  z-index: 2;\r\n  padding: 0.5em 1em;\r\n  border-radius: 0.5em;\r\n  border: 1px solid white;\r\n  max-width: 95%;\r\n  font-size: 90%;\r\n`;\r\n\r\nexport const Popup = ({ target, content }: PopupProps) => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(\r\n    null\r\n  );\r\n  const [popperElement, setPopperElement] = useState<HTMLElement | null>(null);\r\n  const [arrowElement, setArrowElement] = useState<HTMLElement | null>(null);\r\n  const { styles, attributes } = usePopper(referenceElement, popperElement, {\r\n    modifiers: [\r\n      { name: \"arrow\", options: { element: arrowElement } },\r\n      {\r\n        name: \"preventOverflow\",\r\n        options: {\r\n          padding: 5,\r\n        },\r\n      },\r\n    ],\r\n  });\r\n\r\n  const outsideClickReferences = useMemo(\r\n    () => [{ current: popperElement }, { current: referenceElement }],\r\n    [popperElement, referenceElement]\r\n  );\r\n  useOnclickOutside(\r\n    () => {\r\n      visible && setVisible(false);\r\n    },\r\n    {\r\n      refs: outsideClickReferences,\r\n      ignoreClass: \"popup-body\",\r\n      disabled: !visible,\r\n    }\r\n  );\r\n\r\n  const toggleVisibility = () => {\r\n    setVisible((vis) => !vis);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div ref={setReferenceElement} onClick={toggleVisibility}>\r\n        {target}\r\n      </div>\r\n      {visible && (\r\n        <PopupContent\r\n          className=\"popup-body\"\r\n          ref={setPopperElement}\r\n          style={styles.popper}\r\n          {...attributes.popper}\r\n        >\r\n          {content}\r\n          <div ref={setArrowElement} style={styles.arrow} />\r\n        </PopupContent>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import _ from \"lodash/fp\";\r\n\r\nexport const getMeaningfulPercents = (value?: number): string => {\r\n  if (_.isNil(value) || !Number.isFinite(value)) {\r\n    return \"\";\r\n  }\r\n  if (value === 0) {\r\n    return \"0%\";\r\n  }\r\n  let n = 0,\r\n    num = 0;\r\n  while (n < 12) {\r\n    num = value * 100 * Math.pow(10, n);\r\n    if (num > 1) {\r\n      break;\r\n    }\r\n    n++;\r\n  }\r\n  return (value * 100).toFixed(n + 2).replace(/([1-9])?\\.?0+$/, \"$1\") + \"%\";\r\n};\r\n\r\nconst rtf =\r\n  Intl &&\r\n  Intl.RelativeTimeFormat &&\r\n  new Intl.RelativeTimeFormat(\"en\", {\r\n    style: \"short\",\r\n    numeric: \"always\",\r\n  });\r\n\r\nexport const getResinDays = (resinPerDay: number) => (value: number) => {\r\n  return rtf ? rtf.format(Math.round(value / resinPerDay), \"days\") : `${value}`;\r\n};\r\n","import { memo, useMemo, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  Text,\r\n  Box,\r\n  Flex,\r\n  Link,\r\n  NumberInput,\r\n  NumberInputField,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  Area,\r\n  AreaChart,\r\n  CartesianGrid,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from \"recharts\";\r\nimport { FaRegQuestionCircle } from \"react-icons/fa\";\r\nimport _ from \"lodash/fp\";\r\n\r\nimport { Popup } from \"./Popup\";\r\n\r\nimport type { CalculateResult } from \"../utils/calculateChance.worker\";\r\nimport { getMeaningfulPercents, getResinDays } from \"../utils/formatNumber\";\r\n\r\nexport interface ChartDataEntry {\r\n  resin: number;\r\n  chance: number;\r\n}\r\n\r\nconst TooltipContainer = styled.div`\r\n  border-radius: 5px;\r\n  background: #313743;\r\n  padding: 5px 10px;\r\n  border: 1px solid white;\r\n`;\r\n\r\nconst QuestionIconContainer = styled.div`\r\n  cursor: pointer;\r\n  font-size: 120%;\r\n`;\r\n\r\nconst ResinInput = styled(NumberInput)`\r\n  width: 3em;\r\n  margin-left: 0.3em;\r\n  display: inline-block;\r\n  & > input {\r\n    padding: 0.3em;\r\n    height: 1.75em;\r\n  }\r\n`;\r\n\r\nexport const ResultsBox = memo(({ chances }: { chances: CalculateResult }) => {\r\n  const [resinPerDayString, setResinPerDay] = useState(\"160\");\r\n  const converted = Number(resinPerDayString);\r\n  const resinPerDay = isNaN(converted) || converted < 1 ? 160 : converted;\r\n  const { chance } = chances;\r\n\r\n  const chartData = useMemo(() => {\r\n    const invertedChance = 1 - chance;\r\n    const cumulativeChartData: { resin: number; chance: number }[] = [];\r\n    let resinSpent = 0,\r\n      cumulativeInvertedChance = 1;\r\n    const runsPerDay = Math.floor(resinPerDay / 20);\r\n    const step = chance < 0.02 ? runsPerDay : 1;\r\n\r\n    for (let i = 0; i < 365 * runsPerDay; i++) {\r\n      if (cumulativeInvertedChance < 0.05) {\r\n        break;\r\n      }\r\n      resinSpent += 20;\r\n      cumulativeInvertedChance *= invertedChance;\r\n      if (!((i + 1) % step)) {\r\n        cumulativeChartData.push({\r\n          resin: resinSpent,\r\n          chance: 1 - cumulativeInvertedChance,\r\n        });\r\n      }\r\n    }\r\n\r\n    return cumulativeChartData;\r\n  }, [chance, resinPerDay]);\r\n\r\n  return (\r\n    <Box\r\n      margin={1}\r\n      maxW=\"95%\"\r\n      width=\"lg\"\r\n      borderWidth=\"1px\"\r\n      borderRadius=\"lg\"\r\n      padding={2}\r\n      paddingLeft={4}\r\n    >\r\n      {_.isNumber(chances.chanceSubsMatch) && (\r\n        <Flex alignItems=\"center\" flexFlow=\"row nowrap\">\r\n          <Text>Chance of getting an artifact with these stats:</Text>\r\n          <Text\r\n            paddingLeft={2}\r\n            paddingRight={2}\r\n            fontSize=\"120%\"\r\n            fontWeight=\"bold\"\r\n          >\r\n            {getMeaningfulPercents(chances.chanceSubsMatch)}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      {_.isNumber(chances.upgradeChance) && (\r\n        <Flex alignItems=\"center\" flexFlow=\"row nowrap\">\r\n          <Text>Chance of upgrading to desired numbers:</Text>\r\n          <Text\r\n            paddingLeft={2}\r\n            paddingRight={2}\r\n            fontSize=\"120%\"\r\n            fontWeight=\"bold\"\r\n          >\r\n            {getMeaningfulPercents(chances.upgradeChance)}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex alignItems=\"center\" flexFlow=\"row nowrap\">\r\n        <Text>Total chance in one run (20 resin):</Text>\r\n        <Text\r\n          paddingLeft={2}\r\n          paddingRight={2}\r\n          fontSize=\"120%\"\r\n          fontWeight=\"bold\"\r\n        >\r\n          {getMeaningfulPercents(chances.chance)}\r\n        </Text>\r\n        <Popup\r\n          target={\r\n            <QuestionIconContainer>\r\n              <FaRegQuestionCircle />\r\n            </QuestionIconContainer>\r\n          }\r\n          content={\r\n            <div>\r\n              <Text fontWeight=\"bold\" marginRight={6}>\r\n                This calculation assumes the following:\r\n              </Text>\r\n              <Text>5* artifacts upgraded to +20;</Text>\r\n              <Text>50% chance to get one of the two sets;</Text>\r\n              <Text>20% chance to get the correct artifact type;</Text>\r\n              <Text>\r\n                20% chance to get 4 initial sub-stats, and 80% to get 3.{\" \"}\r\n                <Link\r\n                  color=\"teal\"\r\n                  isExternal\r\n                  href=\"https://genshin-impact.fandom.com/wiki/Loot_System/Artifact_Drop_Distribution#Initial_Sub_Stat_Number_Distribution\"\r\n                >\r\n                  Source\r\n                </Link>\r\n              </Text>\r\n              <Text>\r\n                Calculated chance to get the correct main stat and sub-stats;{\" \"}\r\n                <Link\r\n                  color=\"teal\"\r\n                  isExternal\r\n                  href=\"https://genshin-impact.fandom.com/wiki/Artifacts/Distribution\"\r\n                >\r\n                  Source 1\r\n                </Link>\r\n                {\", \"}\r\n                <Link\r\n                  color=\"teal\"\r\n                  isExternal\r\n                  href=\"https://docs.google.com/spreadsheets/d/1sYQrV5Yp_QTVEKMLWquMu0mDgHhOO_Rh2LfcWdS_Eno/edit\"\r\n                >\r\n                  Source 2\r\n                </Link>\r\n              </Text>\r\n              <Text>\r\n                7% chance of getting two 5* artifacts per run;{\" \"}\r\n                <Link\r\n                  color=\"teal\"\r\n                  isExternal\r\n                  href=\"https://docs.google.com/spreadsheets/d/1RcuniapqS6nOP05OCH0ui10Vo3bWu0AvFbhgcHzTybY/edit\"\r\n                >\r\n                  Source\r\n                </Link>\r\n              </Text>\r\n              <Text marginTop={2}>\r\n                Contact me at{\" \"}\r\n                <Link\r\n                  color=\"teal\"\r\n                  isExternal\r\n                  href=\"https://www.reddit.com/message/compose/?to=grumd\"\r\n                >\r\n                  /u/grumd\r\n                </Link>{\" \"}\r\n                if you have any questions.\r\n              </Text>\r\n            </div>\r\n          }\r\n        />\r\n      </Flex>\r\n      <Text css={{}}>\r\n        Chance to get this artifact at least once (\r\n        <ResinInput\r\n          min={20}\r\n          defaultValue={160}\r\n          value={resinPerDayString}\r\n          onChange={setResinPerDay}\r\n        >\r\n          <NumberInputField />\r\n        </ResinInput>{\" \"}\r\n        resin per day):\r\n      </Text>\r\n      {chances.chance > 0 && !_.isEmpty(chartData) && (\r\n        <ResponsiveContainer width=\"100%\" aspect={2.5}>\r\n          <AreaChart\r\n            data={chartData}\r\n            margin={{ top: 5, right: 5, bottom: 5, left: -15 }}\r\n          >\r\n            <defs>\r\n              <linearGradient id=\"colorGrad\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\r\n                <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\r\n              </linearGradient>\r\n            </defs>\r\n            <Area\r\n              fillOpacity={1}\r\n              fill=\"url(#colorGrad)\"\r\n              type=\"monotone\"\r\n              dataKey=\"chance\"\r\n              stroke=\"#8884d8\"\r\n            />\r\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n            <XAxis\r\n              dataKey=\"resin\"\r\n              minTickGap={40}\r\n              tickFormatter={getResinDays(resinPerDay)}\r\n            />\r\n            <YAxis\r\n              domain={[0, 1]}\r\n              tickFormatter={(value) => (value * 100).toFixed(0) + \"%\"}\r\n            />\r\n            <Tooltip\r\n              isAnimationActive={false}\r\n              content={({ payload }) => {\r\n                const item = payload?.[0]?.payload;\r\n                if (item) {\r\n                  return (\r\n                    <TooltipContainer>\r\n                      <div>Resin: {item.resin}</div>\r\n                      <div>Days: {item.resin / resinPerDay}</div>\r\n                      <div>Chance: {getMeaningfulPercents(item.chance)}</div>\r\n                    </TooltipContainer>\r\n                  );\r\n                }\r\n                return null;\r\n              }}\r\n            />\r\n          </AreaChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </Box>\r\n  );\r\n});\r\n","import { useCallback } from \"react\";\r\nimport {\r\n  Select as ChakraSelect,\r\n  SelectProps as ChakraSelectProps,\r\n} from \"@chakra-ui/select\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Option = styled.option`\r\n  color: black;\r\n  background: lightgrey;\r\n`;\r\n\r\ntype SelectProps<T extends string> = {\r\n  onChange: (selected: T) => void;\r\n  items: { label: string; value: T }[];\r\n  value: T | undefined;\r\n} & Omit<ChakraSelectProps, \"onChange\" | \"value\">;\r\n\r\nexport function Select<T extends string>({\r\n  onChange,\r\n  value,\r\n  items,\r\n  ...rest\r\n}: SelectProps<T>) {\r\n  const onChangeSelect = useCallback(\r\n    (event) => {\r\n      const value = event.target.value as T;\r\n      onChange(value);\r\n    },\r\n    [onChange]\r\n  );\r\n\r\n  return (\r\n    <ChakraSelect onChange={onChangeSelect} value={value} {...rest}>\r\n      {items.map((item) => {\r\n        return (\r\n          <Option key={item.value} value={item.value}>\r\n            {item.label}\r\n          </Option>\r\n        );\r\n      })}\r\n    </ChakraSelect>\r\n  );\r\n}\r\n","import _ from \"lodash/fp\";\r\nimport { MainStats, Stats, SubStats, Types } from \"./enums\";\r\n\r\nconst allSubStats: SubStats[] = [\r\n  Stats.CR,\r\n  Stats.CD,\r\n  Stats.ATK,\r\n  Stats.ATKFlat,\r\n  Stats.HP,\r\n  Stats.HPFlat,\r\n  Stats.DEF,\r\n  Stats.DEFFlat,\r\n  Stats.ER,\r\n  Stats.EM,\r\n];\r\n\r\nconst allMainStats: MainStats[] = [\r\n  Stats.HPFlat,\r\n  Stats.ATKFlat,\r\n  Stats.HP,\r\n  Stats.ATK,\r\n  Stats.DEF,\r\n  Stats.ER,\r\n  Stats.EM,\r\n  Stats.CR,\r\n  Stats.CD,\r\n  Stats.HB,\r\n  Stats.Pyro,\r\n  Stats.Electro,\r\n  Stats.Cryo,\r\n  Stats.Hydro,\r\n  Stats.Anemo,\r\n  Stats.Geo,\r\n  Stats.Physical,\r\n  Stats.Dendro,\r\n];\r\n\r\nexport type MainStatsByType<Type extends Types> = Type extends Types.Flower\r\n  ? Stats.HPFlat\r\n  : Type extends Types.Plume\r\n  ? Stats.ATKFlat\r\n  : Type extends Types.Sands\r\n  ? Stats.HP | Stats.ATK | Stats.DEF | Stats.ER | Stats.EM\r\n  : Type extends Types.Goblet\r\n  ?\r\n      | Stats.HP\r\n      | Stats.ATK\r\n      | Stats.DEF\r\n      | Stats.Pyro\r\n      | Stats.Electro\r\n      | Stats.Cryo\r\n      | Stats.Hydro\r\n      | Stats.Anemo\r\n      | Stats.Geo\r\n      | Stats.Physical\r\n      | Stats.Dendro\r\n      | Stats.EM\r\n  : Type extends Types.Circlet\r\n  ? Stats.HP | Stats.ATK | Stats.DEF | Stats.CR | Stats.CD | Stats.HB | Stats.EM\r\n  : never;\r\n\r\nexport type SubStatsByMain<MainStat extends MainStats> = Exclude<\r\n  SubStats,\r\n  MainStat\r\n>;\r\n\r\nexport const allowedMainStats: { [T in Types]: MainStatsByType<T>[] } = {\r\n  [Types.Flower]: [Stats.HPFlat],\r\n  [Types.Plume]: [Stats.ATKFlat],\r\n  [Types.Sands]: [Stats.HP, Stats.ATK, Stats.DEF, Stats.ER, Stats.EM],\r\n  [Types.Goblet]: [\r\n    Stats.HP,\r\n    Stats.ATK,\r\n    Stats.DEF,\r\n    Stats.Pyro,\r\n    Stats.Electro,\r\n    Stats.Cryo,\r\n    Stats.Hydro,\r\n    Stats.Anemo,\r\n    Stats.Geo,\r\n    Stats.Physical,\r\n    Stats.Dendro,\r\n    Stats.EM,\r\n  ],\r\n  [Types.Circlet]: [\r\n    Stats.HP,\r\n    Stats.ATK,\r\n    Stats.DEF,\r\n    Stats.CR,\r\n    Stats.CD,\r\n    Stats.HB,\r\n    Stats.EM,\r\n  ],\r\n};\r\n\r\n// All substats are allowed except for the duplicate of main stat\r\ntype AllowedSubStats = Record<MainStats, SubStats[]>;\r\n\r\nexport const allowedSubStats: AllowedSubStats = allMainStats.reduce(\r\n  (acc, mainStat) => {\r\n    return {\r\n      ...acc,\r\n      [mainStat]: _.without([mainStat], allSubStats),\r\n    };\r\n  },\r\n  {} as AllowedSubStats\r\n);\r\n","import { useState, useEffect, ChangeEvent } from \"react\";\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  Text,\r\n  Box,\r\n  FormControl,\r\n  FormLabel,\r\n  VStack,\r\n  NumberInput,\r\n  HStack,\r\n  NumberInputField,\r\n  CloseButton,\r\n  Flex,\r\n  Switch,\r\n} from \"@chakra-ui/react\";\r\nimport { MdAddCircle } from \"react-icons/md\";\r\nimport _ from \"lodash/fp\";\r\n\r\nimport { ResultsBox } from \"./ResultsBox\";\r\nimport { Select } from \"./Select\";\r\n\r\nimport { allowedMainStats, allowedSubStats } from \"../data/combinations\";\r\nimport { MainStats, SubStats, Types } from \"../data/enums\";\r\nimport WorkerCalculateChance from \"../utils/calculateChance.worker\";\r\nimport type { CalculateResult } from \"../utils/calculateChance.worker\";\r\n\r\ninterface FormData {\r\n  acceptBothSets: boolean;\r\n  type: Types;\r\n  mainStat?: MainStats;\r\n  subStats: [SubStats, number, string][];\r\n}\r\n\r\nconst workerInstance = WorkerCalculateChance();\r\n\r\nconst typeOptions: { value: Types; label: string }[] = _.values(Types).map(\r\n  (type) => ({ label: type, value: type })\r\n);\r\n\r\nexport function ArtifactForm() {\r\n  const [formData, setFormData] = useState<FormData>({\r\n    acceptBothSets: false,\r\n    type: Types.Flower,\r\n    subStats: [],\r\n  });\r\n  const [chances, setChances] = useState<CalculateResult>({ chance: 0 });\r\n  const [calculating, setCalculating] = useState<boolean>(false);\r\n\r\n  const onChangeBothSets = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setFormData((form) => ({\r\n      ...form,\r\n      acceptBothSets: !!event.target.checked,\r\n    }));\r\n  };\r\n\r\n  const onChangeType = (value: Types) => {\r\n    setFormData((form) => ({\r\n      acceptBothSets: form.acceptBothSets,\r\n      type: value,\r\n      subStats: [],\r\n    })); // reset all\r\n  };\r\n\r\n  const onChangeMainStat = (value: MainStats) => {\r\n    setFormData((form) => ({ ...form, mainStat: value, subStats: [] })); // reset sub stats\r\n  };\r\n\r\n  const mainStatOptions = allowedMainStats[formData.type].map((mainStat) => ({\r\n    label: mainStat,\r\n    value: mainStat,\r\n  }));\r\n\r\n  const subStatList = formData.mainStat\r\n    ? allowedSubStats[formData.mainStat]\r\n    : [];\r\n  const subStatOptions = subStatList\r\n    .filter((subStat) => !formData.subStats.find(([s]) => s === subStat))\r\n    .map((subStat) => ({\r\n      label: subStat,\r\n      value: subStat,\r\n    }));\r\n\r\n  useEffect(() => {\r\n    if (!formData.mainStat) {\r\n      setFormData((form) => ({ ...form, mainStat: mainStatOptions[0].value }));\r\n    }\r\n  }, [formData.mainStat, mainStatOptions]);\r\n\r\n  const onAddSubStats = () => {\r\n    if (subStatOptions.length) {\r\n      setFormData((form) => ({\r\n        ...form,\r\n        subStats: [...form.subStats, [subStatOptions[0].value, 0, \"0\"]],\r\n      }));\r\n    }\r\n  };\r\n\r\n  const onChangeSubStat = (subStat: SubStats) => (value: SubStats) => {\r\n    setFormData((form) => ({\r\n      ...form,\r\n      subStats: form.subStats.map((pair) =>\r\n        pair[0] === subStat ? [value, 0, \"0\"] : pair\r\n      ),\r\n    }));\r\n  };\r\n\r\n  const onChangeSubStatNumber =\r\n    (subStat: SubStats) => (stringValue: string, value: number) => {\r\n      setFormData((form) => ({\r\n        ...form,\r\n        subStats: form.subStats.map((pair) =>\r\n          pair[0] === subStat ? [subStat, value || 0, stringValue || \"0\"] : pair\r\n        ),\r\n      }));\r\n    };\r\n\r\n  const onRemoveSubStat = (subStat: SubStats) => {\r\n    setFormData((form) => ({\r\n      ...form,\r\n      subStats: form.subStats.filter((pair) => pair[0] !== subStat),\r\n    }));\r\n  };\r\n\r\n  const onCalculate = async () => {\r\n    if (formData.mainStat) {\r\n      setCalculating(true);\r\n      performance.mark(\"chance\");\r\n      const { chance, upgradeChance, chanceSubsMatch } =\r\n        await workerInstance.calculateChance({\r\n          acceptBothSets: formData.acceptBothSets,\r\n          type: formData.type,\r\n          mainStat: formData.mainStat,\r\n          subStats: formData.subStats.reduce((acc, [subStat, value]) => {\r\n            return {\r\n              ...acc,\r\n              [subStat]: value,\r\n            };\r\n          }, {}),\r\n        });\r\n      performance.measure(\"Time to calculate chances\", \"chance\");\r\n      setCalculating(false);\r\n      performance.getEntriesByType(\"measure\").forEach((perfMeasure) => {\r\n        console.log(perfMeasure.name, perfMeasure.duration, \"ms\");\r\n      });\r\n      performance.clearMarks();\r\n      performance.clearMeasures();\r\n\r\n      setChances({ chance, upgradeChance, chanceSubsMatch });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Flex flexFlow=\"column wrap\" width=\"100%\" alignItems=\"center\">\r\n      <Box\r\n        margin={1}\r\n        maxW=\"95%\"\r\n        width=\"lg\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        padding={2}\r\n      >\r\n        <VStack padding=\"2\" spacing=\"4\">\r\n          <FormControl display=\"flex\" alignItems=\"center\">\r\n            <FormLabel cursor=\"pointer\" htmlFor=\"one-set\" size=\"lg\" mb={1}>\r\n              Accept both artifact sets from a domain\r\n            </FormLabel>\r\n            <Switch\r\n              id=\"one-set\"\r\n              onChange={onChangeBothSets}\r\n              isChecked={formData.acceptBothSets}\r\n            />\r\n          </FormControl>\r\n          <FormControl id=\"type\">\r\n            <FormLabel>Artifact type:</FormLabel>\r\n            <Select\r\n              value={formData.type}\r\n              items={typeOptions}\r\n              onChange={onChangeType}\r\n            />\r\n          </FormControl>\r\n          <FormControl id=\"mainStat\">\r\n            <FormLabel>Main stat:</FormLabel>\r\n            <Select\r\n              value={formData.mainStat}\r\n              items={mainStatOptions}\r\n              onChange={onChangeMainStat}\r\n            />\r\n          </FormControl>\r\n          <FormControl id=\"subStat\">\r\n            <FormLabel>Sub stats (optional):</FormLabel>\r\n            <VStack alignItems=\"start\" width=\"100%\">\r\n              {formData.subStats.map((value, index) => {\r\n                const [subStat, , stringValue] = value;\r\n                return (\r\n                  <HStack key={`substat-${index}`} width=\"100%\">\r\n                    <FormControl id={`substat-${index}-name`}>\r\n                      <Select\r\n                        value={subStat}\r\n                        items={[\r\n                          { label: subStat, value: subStat },\r\n                          ...subStatOptions,\r\n                        ]}\r\n                        onChange={onChangeSubStat(subStat)}\r\n                      />\r\n                    </FormControl>\r\n                    <Text fontWeight=\"bold\" fontSize=\"large\">\r\n                      {\">=\"}\r\n                    </Text>\r\n                    <FormControl id={`substat-${index}-value`}>\r\n                      <NumberInput\r\n                        min={0}\r\n                        defaultValue={0}\r\n                        value={stringValue}\r\n                        onChange={onChangeSubStatNumber(subStat)}\r\n                      >\r\n                        <NumberInputField />\r\n                      </NumberInput>\r\n                    </FormControl>\r\n                    <CloseButton\r\n                      colorScheme=\"blue\"\r\n                      onClick={() => onRemoveSubStat(subStat)}\r\n                    />\r\n                  </HStack>\r\n                );\r\n              })}\r\n              <FormControl>\r\n                {_.keys(formData.subStats).length < 4 && (\r\n                  <IconButton\r\n                    color=\"white\"\r\n                    fontSize=\"2xl\"\r\n                    colorScheme=\"purple\"\r\n                    aria-label=\"Add substat\"\r\n                    onClick={onAddSubStats}\r\n                    icon={<MdAddCircle />}\r\n                  />\r\n                )}\r\n              </FormControl>\r\n            </VStack>\r\n          </FormControl>\r\n          <Button\r\n            disabled={!formData.mainStat}\r\n            colorScheme=\"pink\"\r\n            isLoading={calculating}\r\n            onClick={onCalculate}\r\n          >\r\n            Calculate\r\n          </Button>\r\n        </VStack>\r\n      </Box>\r\n      {chances.chance > 0 && <ResultsBox chances={chances} />}\r\n    </Flex>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\nimport { ArtifactForm } from \"./components/ArtifactForm\";\r\n\r\nconst MainContainer = styled.div`\r\n  background-color: #282c34;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <MainContainer>\r\n      <ArtifactForm />\r\n    </MainContainer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ChakraProvider>\r\n      <App />\r\n    </ChakraProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}